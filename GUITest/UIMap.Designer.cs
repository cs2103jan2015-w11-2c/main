// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace GUITest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// AssertAddMethod - Use 'AssertAddMethodExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertAddMethod()
        {
            #region Variable Declarations
            WinEdit uIAllTaskBoxEdit = this.UIMagicMemoWindow.UIAllTaskBoxWindow.UIAllTaskBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'allTaskBox' text box equals 'Deadline Events            //4. [7p][25/5] task4            //Monday, 4 May 2015            //1. [7-6p] task3            //Monday, 11 May 2015            //2. [6p-7, 12/5] task5            //Saturday, 23 May 2015            //3. [2p-3p] task1            //Wednesday, 24 Jun 2015            //5. [1p-5p] task2            //            //'
            Assert.AreEqual(this.AssertAddMethodExpectedValues.UIAllTaskBoxEditText, uIAllTaskBoxEdit.Text);
        }
        
        /// <summary>
        /// ClearMethod - Use 'ClearMethodParams' to pass parameters into this method.
        /// </summary>
        public void ClearMethod()
        {
            #region Variable Declarations
            WinEdit uICommandInputBoxEdit = this.UIMagicMemoWindow.UICommandInputBoxWindow.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit1 = this.UIMagicMemoWindow.UICommandInputBoxWindow1.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit2 = this.UIMagicMemoWindow.UICommandInputBoxWindow2.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit3 = this.UIMagicMemoWindow.UICommandInputBoxWindow3.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit4 = this.UIMagicMemoWindow.UICommandInputBoxWindow4.UICommandInputBoxEdit;
            #endregion

            // Type 'clear' in 'commandInputBox' text box
            uICommandInputBoxEdit.Text = this.ClearMethodParams.UICommandInputBoxEditText;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit, this.ClearMethodParams.UICommandInputBoxEditSendKeys, ModifierKeys.None);

            // Type 'add task1 on 25/4 13' in 'commandInputBox' text box
            uICommandInputBoxEdit1.Text = this.ClearMethodParams.UICommandInputBoxEditText1;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit1, this.ClearMethodParams.UICommandInputBoxEditSendKeys1, ModifierKeys.None);

            // The control for this action was not recorded.

            // Type 'add task2 on 3/5 7pm' in 'commandInputBox' text box
            uICommandInputBoxEdit2.Text = this.ClearMethodParams.UICommandInputBoxEditText2;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit2, this.ClearMethodParams.UICommandInputBoxEditSendKeys2, ModifierKeys.None);

            // Type 'add task3 on 4/6 11 to 2pm' in 'commandInputBox' text box
            uICommandInputBoxEdit3.Text = this.ClearMethodParams.UICommandInputBoxEditText3;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit3, this.ClearMethodParams.UICommandInputBoxEditSendKeys3, ModifierKeys.None);

            // Type 'clear' in 'commandInputBox' text box
            uICommandInputBoxEdit4.Text = this.ClearMethodParams.UICommandInputBoxEditText4;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit4, this.ClearMethodParams.UICommandInputBoxEditSendKeys4, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertClearMethod - Use 'AssertClearMethodExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertClearMethod()
        {
            #region Variable Declarations
            WinEdit uIAllTaskBoxEdit = this.UIMagicMemoWindow.UIAllTaskBoxWindow.UIAllTaskBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'allTaskBox' text box equals '            //'
            Assert.AreEqual(this.AssertClearMethodExpectedValues.UIAllTaskBoxEditText, uIAllTaskBoxEdit.Text);
        }
        
        /// <summary>
        /// DeleteMethod - Use 'DeleteMethodParams' to pass parameters into this method.
        /// </summary>
        public void DeleteMethod()
        {
            #region Variable Declarations
            WinEdit uICommandInputBoxEdit = this.UIMagicMemoWindow.UICommandInputBoxWindow.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit1 = this.UIMagicMemoWindow.UICommandInputBoxWindow1.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit2 = this.UIMagicMemoWindow.UICommandInputBoxWindow2.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit3 = this.UIMagicMemoWindow.UICommandInputBoxWindow3.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit4 = this.UIMagicMemoWindow.UICommandInputBoxWindow4.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit5 = this.UIMagicMemoWindow.UICommandInputBoxWindow5.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit6 = this.UIMagicMemoWindow.UICommandInputBoxWindow6.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit7 = this.UIMagicMemoWindow.UICommandInputBoxWindow7.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit8 = this.UIMagicMemoWindow.UICommandInputBoxWindow8.UICommandInputBoxEdit;
            #endregion

            // Type 'clear' in 'commandInputBox' text box
            uICommandInputBoxEdit.Text = this.DeleteMethodParams.UICommandInputBoxEditText;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit, this.DeleteMethodParams.UICommandInputBoxEditSendKeys, ModifierKeys.None);

            // The control for this action was not recorded.

            // Type 'add task1 on 22/5 9 to 11' in 'commandInputBox' text box
            uICommandInputBoxEdit1.Text = this.DeleteMethodParams.UICommandInputBoxEditText1;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit1, this.DeleteMethodParams.UICommandInputBoxEditSendKeys1, ModifierKeys.None);

            // The control for this action was not recorded.

            // Type 'add task2 on 5/6 10' in 'commandInputBox' text box
            uICommandInputBoxEdit2.Text = this.DeleteMethodParams.UICommandInputBoxEditText2;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit2, this.DeleteMethodParams.UICommandInputBoxEditSendKeys2, ModifierKeys.None);

            // The control for this action was not recorded.

            // Type 'add task3 on 19/5 11 to 7pm' in 'commandInputBox' text box
            uICommandInputBoxEdit3.Text = this.DeleteMethodParams.UICommandInputBoxEditText3;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit3, this.DeleteMethodParams.UICommandInputBoxEditSendKeys3, ModifierKeys.None);

            // Type 'add task4 by 7/5 11:59p' in 'commandInputBox' text box
            uICommandInputBoxEdit4.Text = this.DeleteMethodParams.UICommandInputBoxEditText4;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit4, this.DeleteMethodParams.UICommandInputBoxEditSendKeys4, ModifierKeys.None);

            // The control for this action was not recorded.

            // Last mouse action was not recorded.

            // Type 'add task6 from 8/5 to 11.5' in 'commandInputBox' text box
            uICommandInputBoxEdit5.Text = this.DeleteMethodParams.UICommandInputBoxEditText5;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit5, this.DeleteMethodParams.UICommandInputBoxEditSendKeys5, ModifierKeys.None);

            // Type 'd1{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit6, this.DeleteMethodParams.UICommandInputBoxEditSendKeys6, ModifierKeys.None);

            // Type 's{Back}{Back}{Back}delete 2 5{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit7, this.DeleteMethodParams.UICommandInputBoxEditSendKeys7, ModifierKeys.None);

            // Type 'delete 1-3' in 'commandInputBox' text box
            uICommandInputBoxEdit8.Text = this.DeleteMethodParams.UICommandInputBoxEditText6;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit8, this.DeleteMethodParams.UICommandInputBoxEditSendKeys8, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertDeleteMethod - Use 'AssertDeleteMethodExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertDeleteMethod()
        {
            #region Variable Declarations
            WinEdit uIAllTaskBoxEdit = this.UIMagicMemoWindow.UIAllTaskBoxWindow.UIAllTaskBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'allTaskBox' text box equals '            //'
            Assert.AreEqual(this.AssertDeleteMethodExpectedValues.UIAllTaskBoxEditText, uIAllTaskBoxEdit.Text);
        }
        
        /// <summary>
        /// EditMethod - Use 'EditMethodParams' to pass parameters into this method.
        /// </summary>
        public void EditMethod()
        {
            #region Variable Declarations
            WinEdit uICommandInputBoxEdit = this.UIMagicMemoWindow.UICommandInputBoxWindow.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit1 = this.UIMagicMemoWindow.UICommandInputBoxWindow1.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit2 = this.UIMagicMemoWindow.UICommandInputBoxWindow2.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit3 = this.UIMagicMemoWindow.UICommandInputBoxWindow3.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit4 = this.UIMagicMemoWindow.UICommandInputBoxWindow4.UICommandInputBoxEdit;
            #endregion

            // Type 'clear' in 'commandInputBox' text box
            uICommandInputBoxEdit.Text = this.EditMethodParams.UICommandInputBoxEditText;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit, this.EditMethodParams.UICommandInputBoxEditSendKeys, ModifierKeys.None);

            // Type 'add task1 on 6/7 12 to 3:30pm' in 'commandInputBox' text box
            uICommandInputBoxEdit1.Text = this.EditMethodParams.UICommandInputBoxEditText1;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit1, this.EditMethodParams.UICommandInputBoxEditSendKeys1, ModifierKeys.None);

            // Type 'add vacation starts on 7/5 7' in 'commandInputBox' text box
            uICommandInputBoxEdit2.Text = this.EditMethodParams.UICommandInputBoxEditText2;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit2, this.EditMethodParams.UICommandInputBoxEditSendKeys2, ModifierKeys.None);

            // Type 'edit 1 vacation starts on 8/5 7 to 10' in 'commandInputBox' text box
            uICommandInputBoxEdit3.Text = this.EditMethodParams.UICommandInputBoxEditText3;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit3, this.EditMethodParams.UICommandInputBoxEditSendKeys3, ModifierKeys.None);

            // Type 'edit 2 have lunch with Ann on 6/6 12 to 13:45' in 'commandInputBox' text box
            uICommandInputBoxEdit4.Text = this.EditMethodParams.UICommandInputBoxEditText4;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit4, this.EditMethodParams.UICommandInputBoxEditSendKeys4, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertEditMethod - Use 'AssertEditMethodExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertEditMethod()
        {
            #region Variable Declarations
            WinEdit uIAllTaskBoxEdit = this.UIMagicMemoWindow.UIAllTaskBoxWindow.UIAllTaskBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'allTaskBox' text box equals 'Friday, 8 May 2015            //1. [7-10] vacation starts            //Saturday, 6 Jun 2015            //2. [12p-1:30p] have lunch with Ann            //            //'
            Assert.AreEqual(this.AssertEditMethodExpectedValues.UIAllTaskBoxEditText, uIAllTaskBoxEdit.Text);
        }
        
        /// <summary>
        /// AssertFreeSlotMethod - Use 'AssertFreeSlotMethodExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertFreeSlotMethod()
        {
            #region Variable Declarations
            WinEdit uIAllTaskBoxEdit = this.UIMagicMemoWindow.UIAllTaskBoxWindow.UIAllTaskBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'allTaskBox' text box equals '            //'
            Assert.AreEqual(this.AssertFreeSlotMethodExpectedValues.UIAllTaskBoxEditText, uIAllTaskBoxEdit.Text);
        }
        
        /// <summary>
        /// InvalidDeleteMethod - Use 'InvalidDeleteMethodParams' to pass parameters into this method.
        /// </summary>
        public void InvalidDeleteMethod()
        {
            #region Variable Declarations
            WinEdit uICommandInputBoxEdit = this.UIMagicMemoWindow.UICommandInputBoxWindow.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit1 = this.UIMagicMemoWindow.UICommandInputBoxWindow1.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit2 = this.UIMagicMemoWindow.UICommandInputBoxWindow2.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit3 = this.UIMagicMemoWindow.UICommandInputBoxWindow3.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit4 = this.UIMagicMemoWindow.UICommandInputBoxWindow4.UICommandInputBoxEdit;
            WinText uIInvalidnumberspecifiText2 = this.UIMagicMemoWindow.UIDeletedlinenumbers12Window.UIInvalidnumberspecifiText2;
            WinText uIInvalidnumberspecifiText3 = this.UIMagicMemoWindow.UIDeletedlinenumbers12Window.UIInvalidnumberspecifiText3;
            WinText uIInvalidnumberspecifiText4 = this.UIMagicMemoWindow.UIDeletedlinenumbers12Window.UIInvalidnumberspecifiText4;
            #endregion

            // Type 'clear' in 'commandInputBox' text box
            uICommandInputBoxEdit.Text = this.InvalidDeleteMethodParams.UICommandInputBoxEditText;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit, this.InvalidDeleteMethodParams.UICommandInputBoxEditSendKeys, ModifierKeys.None);

            // The control for this action was not recorded.

            // Type 'add task1 0n 4/6 11' in 'commandInputBox' text box
            uICommandInputBoxEdit1.Text = this.InvalidDeleteMethodParams.UICommandInputBoxEditText1;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit1, this.InvalidDeleteMethodParams.UICommandInputBoxEditSendKeys1, ModifierKeys.None);

            // Type 'add task2 on 6/6 19' in 'commandInputBox' text box
            uICommandInputBoxEdit2.Text = this.InvalidDeleteMethodParams.UICommandInputBoxEditText2;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit2, this.InvalidDeleteMethodParams.UICommandInputBoxEditSendKeys2, ModifierKeys.None);

            // The control for this action was not recorded.

            // Type 'add task3 on 5/7 11 to 12' in 'commandInputBox' text box
            uICommandInputBoxEdit3.Text = this.InvalidDeleteMethodParams.UICommandInputBoxEditText3;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit3, this.InvalidDeleteMethodParams.UICommandInputBoxEditSendKeys3, ModifierKeys.None);

            // Type 'delete 100' in 'commandInputBox' text box
            uICommandInputBoxEdit4.Text = this.InvalidDeleteMethodParams.UICommandInputBoxEditText4;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit4, this.InvalidDeleteMethodParams.UICommandInputBoxEditSendKeys4, ModifierKeys.None);

            // Click 'Invalid number specified: ?' label
            Mouse.Click(uIInvalidnumberspecifiText2, new Point(236, 18));

            // Double-Click 'Invalid number specified: ?' label
            Mouse.DoubleClick(uIInvalidnumberspecifiText3, new Point(236, 18));

            // Click 'Invalid number specified: ?' label
            Mouse.Click(uIInvalidnumberspecifiText4, new Point(154, 7));
        }
        
        /// <summary>
        /// AssertInvalidDeleteMethod - Use 'AssertInvalidDeleteMethodExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertInvalidDeleteMethod()
        {
            #region Variable Declarations
            WinEdit uIAllTaskBoxEdit = this.UIMagicMemoWindow.UIAllTaskBoxWindow.UIAllTaskBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'allTaskBox' text box equals 'Floating            //1. task1 0n 4/6 11            //Saturday, 6 Jun 2015            //2. [7p-8p] task2            //Sunday, 5 Jul 2015            //3. [11-12p] task3            //            //'
            Assert.AreEqual(this.AssertInvalidDeleteMethodExpectedValues.UIAllTaskBoxEditText, uIAllTaskBoxEdit.Text);
        }
        
        /// <summary>
        /// RedoMethod - Use 'RedoMethodParams' to pass parameters into this method.
        /// </summary>
        public void RedoMethod()
        {
            #region Variable Declarations
            WinEdit uICommandInputBoxEdit = this.UIMagicMemoWindow.UICommandInputBoxWindow.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit1 = this.UIMagicMemoWindow.UICommandInputBoxWindow1.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit2 = this.UIMagicMemoWindow.UICommandInputBoxWindow2.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit3 = this.UIMagicMemoWindow.UICommandInputBoxWindow3.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit4 = this.UIMagicMemoWindow.UICommandInputBoxWindow4.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit5 = this.UIMagicMemoWindow.UICommandInputBoxWindow5.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit6 = this.UIMagicMemoWindow.UICommandInputBoxWindow6.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit7 = this.UIMagicMemoWindow.UICommandInputBoxWindow7.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit8 = this.UIMagicMemoWindow.UICommandInputBoxWindow8.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit9 = this.UIMagicMemoWindow.UICommandInputBoxWindow9.UICommandInputBoxEdit;
            #endregion

            // Type 'clear' in 'commandInputBox' text box
            uICommandInputBoxEdit.Text = this.RedoMethodParams.UICommandInputBoxEditText;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit, this.RedoMethodParams.UICommandInputBoxEditSendKeys, ModifierKeys.None);

            // Type 'add task1 on 7/5 11 to 3p' in 'commandInputBox' text box
            uICommandInputBoxEdit1.Text = this.RedoMethodParams.UICommandInputBoxEditText1;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit1, this.RedoMethodParams.UICommandInputBoxEditSendKeys1, ModifierKeys.None);

            // The control for this action was not recorded.

            // Type 'add task2 by 17/5 11pm' in 'commandInputBox' text box
            uICommandInputBoxEdit2.Text = this.RedoMethodParams.UICommandInputBoxEditText2;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit2, this.RedoMethodParams.UICommandInputBoxEditSendKeys2, ModifierKeys.None);

            // The control for this action was not recorded.

            // Type 'add task3 from 11/5 6pm to 12/5 7pm' in 'commandInputBox' text box
            uICommandInputBoxEdit3.Text = this.RedoMethodParams.UICommandInputBoxEditText3;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit3, this.RedoMethodParams.UICommandInputBoxEditSendKeys3, ModifierKeys.None);

            // Type 'undo ' in 'commandInputBox' text box
            uICommandInputBoxEdit4.Text = this.RedoMethodParams.UICommandInputBoxEditText4;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit4, this.RedoMethodParams.UICommandInputBoxEditSendKeys4, ModifierKeys.None);

            // Type 'undo' in 'commandInputBox' text box
            uICommandInputBoxEdit5.Text = this.RedoMethodParams.UICommandInputBoxEditText5;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit5, this.RedoMethodParams.UICommandInputBoxEditSendKeys5, ModifierKeys.None);

            // Type 'undo' in 'commandInputBox' text box
            uICommandInputBoxEdit6.Text = this.RedoMethodParams.UICommandInputBoxEditText6;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit6, this.RedoMethodParams.UICommandInputBoxEditSendKeys6, ModifierKeys.None);

            // Last mouse action was not recorded.

            // Last mouse action was not recorded.

            // Last mouse action was not recorded.

            // Type 'redo' in 'commandInputBox' text box
            uICommandInputBoxEdit7.Text = this.RedoMethodParams.UICommandInputBoxEditText7;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit7, this.RedoMethodParams.UICommandInputBoxEditSendKeys7, ModifierKeys.None);

            // The control for this action was not recorded.

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit8, this.RedoMethodParams.UICommandInputBoxEditSendKeys8, ModifierKeys.None);

            // Type 'redo' in 'commandInputBox' text box
            uICommandInputBoxEdit9.Text = this.RedoMethodParams.UICommandInputBoxEditText8;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit9, this.RedoMethodParams.UICommandInputBoxEditSendKeys9, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertRedoMethod - Use 'AssertRedoMethodExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertRedoMethod()
        {
            #region Variable Declarations
            WinEdit uIAllTaskBoxEdit = this.UIMagicMemoWindow.UIAllTaskBoxWindow.UIAllTaskBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'allTaskBox' text box equals 'Deadline Events            //3. [11p][17/5] task2            //Thursday, 7 May 2015            //1. [11-3p] task1            //Monday, 11 May 2015            //2. [6p-7p, 12/5] task3            //            //'
            Assert.AreEqual(this.AssertRedoMethodExpectedValues.UIAllTaskBoxEditText, uIAllTaskBoxEdit.Text);
        }
        
        /// <summary>
        /// SearchMethod - Use 'SearchMethodParams' to pass parameters into this method.
        /// </summary>
        public void SearchMethod()
        {
            #region Variable Declarations
            WinEdit uICommandInputBoxEdit = this.UIMagicMemoWindow.UICommandInputBoxWindow.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit1 = this.UIMagicMemoWindow.UICommandInputBoxWindow1.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit2 = this.UIMagicMemoWindow.UICommandInputBoxWindow2.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit3 = this.UIMagicMemoWindow.UICommandInputBoxWindow3.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit4 = this.UIMagicMemoWindow.UICommandInputBoxWindow4.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit5 = this.UIMagicMemoWindow.UICommandInputBoxWindow5.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit6 = this.UIMagicMemoWindow.UICommandInputBoxWindow6.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit7 = this.UIMagicMemoWindow.UICommandInputBoxWindow7.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit8 = this.UIMagicMemoWindow.UICommandInputBoxWindow8.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit9 = this.UIMagicMemoWindow.UICommandInputBoxWindow9.UICommandInputBoxEdit;
            #endregion

            // Last mouse action was not recorded.

            // Type 'clear' in 'commandInputBox' text box
            uICommandInputBoxEdit.Text = this.SearchMethodParams.UICommandInputBoxEditText;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit, this.SearchMethodParams.UICommandInputBoxEditSendKeys, ModifierKeys.None);

            // Type 'add project meeting on 6/5 12 to 18:30' in 'commandInputBox' text box
            uICommandInputBoxEdit1.Text = this.SearchMethodParams.UICommandInputBoxEditText1;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit1, this.SearchMethodParams.UICommandInputBoxEditSendKeys1, ModifierKeys.None);

            // Type 'add meet friends in school on 19/5 11 to 3pm' in 'commandInputBox' text box
            uICommandInputBoxEdit2.Text = this.SearchMethodParams.UICommandInputBoxEditText2;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit2, this.SearchMethodParams.UICommandInputBoxEditSendKeys2, ModifierKeys.None);

            // Type 'add have lunch with Ann from 15/5 3pm to 15/5 5pm' in 'commandInputBox' text box
            uICommandInputBoxEdit3.Text = this.SearchMethodParams.UICommandInputBoxEditText3;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit3, this.SearchMethodParams.UICommandInputBoxEditSendKeys3, ModifierKeys.None);

            // Last mouse action was not recorded.

            // Type 'add clean the room by 13/5 12pm' in 'commandInputBox' text box
            uICommandInputBoxEdit4.Text = this.SearchMethodParams.UICommandInputBoxEditText4;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit4, this.SearchMethodParams.UICommandInputBoxEditSendKeys4, ModifierKeys.None);

            // Type 'search clean room' in 'commandInputBox' text box
            uICommandInputBoxEdit5.Text = this.SearchMethodParams.UICommandInputBoxEditText5;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit5, this.SearchMethodParams.UICommandInputBoxEditSendKeys5, ModifierKeys.None);

            // Type 'display' in 'commandInputBox' text box
            uICommandInputBoxEdit6.Text = this.SearchMethodParams.UICommandInputBoxEditText6;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit6, this.SearchMethodParams.UICommandInputBoxEditSendKeys6, ModifierKeys.None);

            // The control for this action was not recorded.

            // Type 'search the in lun' in 'commandInputBox' text box
            uICommandInputBoxEdit7.Text = this.SearchMethodParams.UICommandInputBoxEditText7;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit7, this.SearchMethodParams.UICommandInputBoxEditSendKeys7, ModifierKeys.None);

            // Type 'search lun' in 'commandInputBox' text box
            uICommandInputBoxEdit8.Text = this.SearchMethodParams.UICommandInputBoxEditText8;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit8, this.SearchMethodParams.UICommandInputBoxEditSendKeys8, ModifierKeys.None);

            // Type 'search ing' in 'commandInputBox' text box
            uICommandInputBoxEdit9.Text = this.SearchMethodParams.UICommandInputBoxEditText9;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit9, this.SearchMethodParams.UICommandInputBoxEditSendKeys9, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertSerachMethod - Use 'AssertSerachMethodExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertSerachMethod()
        {
            #region Variable Declarations
            WinEdit uIAllTaskBoxEdit = this.UIMagicMemoWindow.UIAllTaskBoxWindow.UIAllTaskBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'allTaskBox' text box equals 'Tuesday, 19 May 2015            //4. [11-3p] meet friends in school            //Wednesday, 6 May 2015            //1. [12p-6:30p] project meeting            //            //'
            Assert.AreEqual(this.AssertSerachMethodExpectedValues.UIAllTaskBoxEditText, uIAllTaskBoxEdit.Text);
        }
        
        /// <summary>
        /// SearchMethod2 - Use 'SearchMethod2Params' to pass parameters into this method.
        /// </summary>
        public void SearchMethod2()
        {
            #region Variable Declarations
            WinEdit uIAllTaskBoxEdit = this.UIMagicMemoWindow.UIAllTaskBoxWindow.UIAllTaskBoxEdit;
            WinEdit uICommandInputBoxEdit = this.UIMagicMemoWindow.UICommandInputBoxWindow.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit1 = this.UIMagicMemoWindow.UICommandInputBoxWindow1.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit2 = this.UIMagicMemoWindow.UICommandInputBoxWindow2.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit3 = this.UIMagicMemoWindow.UICommandInputBoxWindow3.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit4 = this.UIMagicMemoWindow.UICommandInputBoxWindow4.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit5 = this.UIMagicMemoWindow.UICommandInputBoxWindow5.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit6 = this.UIMagicMemoWindow.UICommandInputBoxWindow6.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit7 = this.UIMagicMemoWindow.UICommandInputBoxWindow7.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit8 = this.UIMagicMemoWindow.UICommandInputBoxWindow8.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit9 = this.UIMagicMemoWindow.UICommandInputBoxWindow9.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit10 = this.UIMagicMemoWindow.UICommandInputBoxWindow10.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit11 = this.UIMagicMemoWindow.UICommandInputBoxWindow11.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit12 = this.UIMagicMemoWindow.UICommandInputBoxWindow12.UICommandInputBoxEdit;
            #endregion

            // Click 'allTaskBox' text box
            Mouse.Click(uIAllTaskBoxEdit, new Point(44, 218));

            // Last mouse action was not recorded.

            // Type 'clear' in 'commandInputBox' text box
            uICommandInputBoxEdit.Text = this.SearchMethod2Params.UICommandInputBoxEditText;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit, this.SearchMethod2Params.UICommandInputBoxEditSendKeys, ModifierKeys.None);

            // The control for this action was not recorded.

            // Type 'add hahaha on 15/5 22:33' in 'commandInputBox' text box
            uICommandInputBoxEdit1.Text = this.SearchMethod2Params.UICommandInputBoxEditText1;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit1, this.SearchMethod2Params.UICommandInputBoxEditSendKeys1, ModifierKeys.None);

            // The control for this action was not recorded.

            // Last mouse action was not recorded.

            // Last mouse action was not recorded.

            // Type 'add task manager to be installed by 16/6 12p' in 'commandInputBox' text box
            uICommandInputBoxEdit2.Text = this.SearchMethod2Params.UICommandInputBoxEditText2;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit2, this.SearchMethod2Params.UICommandInputBoxEditSendKeys2, ModifierKeys.None);

            // Type 'add finish report by 7/5 11:59p' in 'commandInputBox' text box
            uICommandInputBoxEdit3.Text = this.SearchMethod2Params.UICommandInputBoxEditText3;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit3, this.SearchMethod2Params.UICommandInputBoxEditSendKeys3, ModifierKeys.None);

            // Type 'add have lunch with friends from 11/5 to 12/5 12' in 'commandInputBox' text box
            uICommandInputBoxEdit4.Text = this.SearchMethod2Params.UICommandInputBoxEditText4;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit4, this.SearchMethod2Params.UICommandInputBoxEditSendKeys4, ModifierKeys.None);

            // Last mouse action was not recorded.

            // Last mouse action was not recorded.

            // Type 'add do laundry on 9/5 13:30' in 'commandInputBox' text box
            uICommandInputBoxEdit5.Text = this.SearchMethod2Params.UICommandInputBoxEditText5;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit5, this.SearchMethod2Params.UICommandInputBoxEditSendKeys5, ModifierKeys.None);

            // Last mouse action was not recorded.

            // Type 'search 12p 16/6' in 'commandInputBox' text box
            uICommandInputBoxEdit6.Text = this.SearchMethod2Params.UICommandInputBoxEditText6;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit6, this.SearchMethod2Params.UICommandInputBoxEditSendKeys6, ModifierKeys.None);

            // Type 'd{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit7, this.SearchMethod2Params.UICommandInputBoxEditSendKeys7, ModifierKeys.None);

            // Type 'search 12p-1p 11/5' in 'commandInputBox' text box
            uICommandInputBoxEdit8.Text = this.SearchMethod2Params.UICommandInputBoxEditText7;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit8, this.SearchMethod2Params.UICommandInputBoxEditSendKeys8, ModifierKeys.None);

            // The control for this action was not recorded.

            // Type 'display' in 'commandInputBox' text box
            uICommandInputBoxEdit9.Text = this.SearchMethod2Params.UICommandInputBoxEditText8;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit9, this.SearchMethod2Params.UICommandInputBoxEditSendKeys9, ModifierKeys.None);

            // Type 'search ' in 'commandInputBox' text box
            uICommandInputBoxEdit10.Text = this.SearchMethod2Params.UICommandInputBoxEditText9;

            // Last mouse action was not recorded.

            // Type 'search 10:33p 15 may' in 'commandInputBox' text box
            uICommandInputBoxEdit10.Text = this.SearchMethod2Params.UICommandInputBoxEditText10;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit10, this.SearchMethod2Params.UICommandInputBoxEditSendKeys10, ModifierKeys.None);

            // The control for this action was not recorded.

            // Type 'display' in 'commandInputBox' text box
            uICommandInputBoxEdit11.Text = this.SearchMethod2Params.UICommandInputBoxEditText11;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit11, this.SearchMethod2Params.UICommandInputBoxEditSendKeys11, ModifierKeys.None);

            // The control for this action was not recorded.

            // Type 'search 10:33p-11:33p 15/5' in 'commandInputBox' text box
            uICommandInputBoxEdit12.Text = this.SearchMethod2Params.UICommandInputBoxEditText12;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit12, this.SearchMethod2Params.UICommandInputBoxEditSendKeys12, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertSearchMethod2 - Use 'AssertSearchMethod2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertSearchMethod2()
        {
            #region Variable Declarations
            WinEdit uIAllTaskBoxEdit = this.UIMagicMemoWindow.UIAllTaskBoxWindow.UIAllTaskBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'allTaskBox' text box equals 'Friday, 15 May 2015            //4. [10:33p-11:33p] hahaha            //            //'
            Assert.AreEqual(this.AssertSearchMethod2ExpectedValues.UIAllTaskBoxEditText, uIAllTaskBoxEdit.Text);
        }
        
        /// <summary>
        /// trash - Use 'trashParams' to pass parameters into this method.
        /// </summary>
        public void trash()
        {
            #region Variable Declarations
            WinEdit uICommandInputBoxEdit = this.UIMagicMemoWindow.UICommandInputBoxWindow.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit1 = this.UIMagicMemoWindow.UICommandInputBoxWindow1.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit2 = this.UIMagicMemoWindow.UICommandInputBoxWindow2.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit3 = this.UIMagicMemoWindow.UICommandInputBoxWindow3.UICommandInputBoxEdit;
            #endregion

            // Type 'clear' in 'commandInputBox' text box
            uICommandInputBoxEdit.Text = this.trashParams.UICommandInputBoxEditText;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit, this.trashParams.UICommandInputBoxEditSendKeys, ModifierKeys.None);

            // Type 'add task1 on 7/7 6p' in 'commandInputBox' text box
            uICommandInputBoxEdit1.Text = this.trashParams.UICommandInputBoxEditText1;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit1, this.trashParams.UICommandInputBoxEditSendKeys1, ModifierKeys.None);

            // The control for this action was not recorded.

            // Type 'add tsk2 by 5/6 3:45pm' in 'commandInputBox' text box
            uICommandInputBoxEdit2.Text = this.trashParams.UICommandInputBoxEditText2;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit2, this.trashParams.UICommandInputBoxEditSendKeys2, ModifierKeys.None);

            // The control for this action was not recorded.

            // Type 'add task3 on 15/5 4pm to 12p' in 'commandInputBox' text box
            uICommandInputBoxEdit3.Text = this.trashParams.UICommandInputBoxEditText3;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit3, this.trashParams.UICommandInputBoxEditSendKeys3, ModifierKeys.None);
        }
        
        /// <summary>
        /// TwentyFourHrMethod - Use 'TwentyFourHrMethodParams' to pass parameters into this method.
        /// </summary>
        public void TwentyFourHrMethod()
        {
            #region Variable Declarations
            WinEdit uICommandInputBoxEdit = this.UIMagicMemoWindow.UICommandInputBoxWindow.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit1 = this.UIMagicMemoWindow.UICommandInputBoxWindow1.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit2 = this.UIMagicMemoWindow.UICommandInputBoxWindow2.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit3 = this.UIMagicMemoWindow.UICommandInputBoxWindow3.UICommandInputBoxEdit;
            #endregion

            // Type 'clear' in 'commandInputBox' text box
            uICommandInputBoxEdit.Text = this.TwentyFourHrMethodParams.UICommandInputBoxEditText;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit1, this.TwentyFourHrMethodParams.UICommandInputBoxEditSendKeys, ModifierKeys.None);

            // Type 'add task1 on 7/7 17 ' in 'commandInputBox' text box
            uICommandInputBoxEdit2.Text = this.TwentyFourHrMethodParams.UICommandInputBoxEditText1;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit2, this.TwentyFourHrMethodParams.UICommandInputBoxEditSendKeys1, ModifierKeys.None);

            // Type 'add task3 on 5/5 14:44 to 23:59' in 'commandInputBox' text box
            uICommandInputBoxEdit3.Text = this.TwentyFourHrMethodParams.UICommandInputBoxEditText2;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit3, this.TwentyFourHrMethodParams.UICommandInputBoxEditSendKeys2, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertTwentyFourHrMethod - Use 'AssertTwentyFourHrMethodExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertTwentyFourHrMethod()
        {
            #region Variable Declarations
            WinEdit uIAllTaskBoxEdit = this.UIMagicMemoWindow.UIAllTaskBoxWindow.UIAllTaskBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'allTaskBox' text box equals 'Tuesday, 5 May 2015            //2. [2:44p-11:59p] task3            //Tuesday, 7 Jul 2015            //3. [5p-6p] task1            //            //'
            Assert.AreEqual(this.AssertTwentyFourHrMethodExpectedValues.UIAllTaskBoxEditText, uIAllTaskBoxEdit.Text);
        }
        
        /// <summary>
        /// UndoMethod - Use 'UndoMethodParams' to pass parameters into this method.
        /// </summary>
        public void UndoMethod()
        {
            #region Variable Declarations
            WinEdit uICommandInputBoxEdit = this.UIMagicMemoWindow.UICommandInputBoxWindow.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit1 = this.UIMagicMemoWindow.UICommandInputBoxWindow1.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit2 = this.UIMagicMemoWindow.UICommandInputBoxWindow2.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit3 = this.UIMagicMemoWindow.UICommandInputBoxWindow3.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit4 = this.UIMagicMemoWindow.UICommandInputBoxWindow4.UICommandInputBoxEdit;
            #endregion

            // Type 'clear' in 'commandInputBox' text box
            uICommandInputBoxEdit.Text = this.UndoMethodParams.UICommandInputBoxEditText;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit, this.UndoMethodParams.UICommandInputBoxEditSendKeys, ModifierKeys.None);

            // Type 'add task1 on 5/5 12:32' in 'commandInputBox' text box
            uICommandInputBoxEdit1.Text = this.UndoMethodParams.UICommandInputBoxEditText1;

            // Type '{Left}{Left}{Left}{Left}{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit1, this.UndoMethodParams.UICommandInputBoxEditSendKeys1, ModifierKeys.None);

            // The control for this action was not recorded.

            // Type 'add task2 on 6/7 4pm' in 'commandInputBox' text box
            uICommandInputBoxEdit2.Text = this.UndoMethodParams.UICommandInputBoxEditText2;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit2, this.UndoMethodParams.UICommandInputBoxEditSendKeys2, ModifierKeys.None);

            // Type 'u{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit3, this.UndoMethodParams.UICommandInputBoxEditSendKeys3, ModifierKeys.None);

            // Type 'u{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit4, this.UndoMethodParams.UICommandInputBoxEditSendKeys4, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertUndoMethod - Use 'AssertUndoMethodExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertUndoMethod()
        {
            #region Variable Declarations
            WinEdit uIAllTaskBoxEdit = this.UIMagicMemoWindow.UIAllTaskBoxWindow.UIAllTaskBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'allTaskBox' text box equals '            //'
            Assert.AreEqual(this.AssertUndoMethodExpectedValues.UIAllTaskBoxEditText, uIAllTaskBoxEdit.Text);
        }
        
        /// <summary>
        /// AddEventMethod - Use 'AddEventMethodParams' to pass parameters into this method.
        /// </summary>
        public void AddEventMethod()
        {
            #region Variable Declarations
            WinEdit uICommandInputBoxEdit = this.UIMagicMemoWindow.UICommandInputBoxWindow.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit1 = this.UIMagicMemoWindow.UICommandInputBoxWindow1.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit2 = this.UIMagicMemoWindow.UICommandInputBoxWindow2.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit3 = this.UIMagicMemoWindow.UICommandInputBoxWindow3.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit4 = this.UIMagicMemoWindow.UICommandInputBoxWindow4.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit5 = this.UIMagicMemoWindow.UICommandInputBoxWindow5.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit6 = this.UIMagicMemoWindow.UICommandInputBoxWindow6.UICommandInputBoxEdit;
            #endregion

            // Type 'clear' in 'commandInputBox' text box
            uICommandInputBoxEdit.Text = this.AddEventMethodParams.UICommandInputBoxEditText;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit, this.AddEventMethodParams.UICommandInputBoxEditSendKeys, ModifierKeys.None);

            // Type 'add testing1 on 19/6 4' in 'commandInputBox' text box
            uICommandInputBoxEdit1.Text = this.AddEventMethodParams.UICommandInputBoxEditText1;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit1, this.AddEventMethodParams.UICommandInputBoxEditSendKeys1, ModifierKeys.None);

            // Type 'add testing2 on 20/5' in 'commandInputBox' text box
            uICommandInputBoxEdit2.Text = this.AddEventMethodParams.UICommandInputBoxEditText2;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit2, this.AddEventMethodParams.UICommandInputBoxEditSendKeys2, ModifierKeys.None);

            // Type 'add testing 3 from 19 may 3p to 20 may 4p' in 'commandInputBox' text box
            uICommandInputBoxEdit3.Text = this.AddEventMethodParams.UICommandInputBoxEditText3;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit3, this.AddEventMethodParams.UICommandInputBoxEditSendKeys3, ModifierKeys.None);

            // Type 'add expired event on 12/1 4' in 'commandInputBox' text box
            uICommandInputBoxEdit4.Text = this.AddEventMethodParams.UICommandInputBoxEditText4;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit4, this.AddEventMethodParams.UICommandInputBoxEditSendKeys4, ModifierKeys.None);

            // Type 'add deadline event by 31 dec 23:59' in 'commandInputBox' text box
            uICommandInputBoxEdit5.Text = this.AddEventMethodParams.UICommandInputBoxEditText5;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit5, this.AddEventMethodParams.UICommandInputBoxEditSendKeys5, ModifierKeys.None);

            // Type '12' in 'commandInputBox' text box
            uICommandInputBoxEdit6.Text = this.AddEventMethodParams.UICommandInputBoxEditText6;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit6, this.AddEventMethodParams.UICommandInputBoxEditSendKeys6, ModifierKeys.None);
        }
        
        /// <summary>
        /// AddMethod - Use 'AddMethodExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AddMethod()
        {
            #region Variable Declarations
            WinEdit uIAllTaskBoxEdit = this.UIMagicMemoWindow.UIAllTaskBoxWindow.UIAllTaskBoxEdit;
            #endregion

            // Verify that the 'ControlType' property of 'allTaskBox' text box equals 'Edit'
            Assert.AreEqual(this.AddMethodExpectedValues.UIAllTaskBoxEditControlType, uIAllTaskBoxEdit.ControlType.ToString());
        }
        
        /// <summary>
        /// FreeSlotMethod - Use 'FreeSlotMethodExpectedValues' to pass parameters into this method.
        /// </summary>
        public void FreeSlotMethod()
        {
            #region Variable Declarations
            WinEdit uIAllTaskBoxEdit = this.UIMagicMemoWindow.UIAllTaskBoxWindow.UIAllTaskBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'allTaskBox' text box equals 'Wednesday, 12 Aug 2015            //1. [9-11p] 14 hours            //            //'
            Assert.AreEqual(this.FreeSlotMethodExpectedValues.UIAllTaskBoxEditText, uIAllTaskBoxEdit.Text);
        }
        
        #region Properties
        public virtual AssertAddMethodExpectedValues AssertAddMethodExpectedValues
        {
            get
            {
                if ((this.mAssertAddMethodExpectedValues == null))
                {
                    this.mAssertAddMethodExpectedValues = new AssertAddMethodExpectedValues();
                }
                return this.mAssertAddMethodExpectedValues;
            }
        }
        
        public virtual ClearMethodParams ClearMethodParams
        {
            get
            {
                if ((this.mClearMethodParams == null))
                {
                    this.mClearMethodParams = new ClearMethodParams();
                }
                return this.mClearMethodParams;
            }
        }
        
        public virtual AssertClearMethodExpectedValues AssertClearMethodExpectedValues
        {
            get
            {
                if ((this.mAssertClearMethodExpectedValues == null))
                {
                    this.mAssertClearMethodExpectedValues = new AssertClearMethodExpectedValues();
                }
                return this.mAssertClearMethodExpectedValues;
            }
        }
        
        public virtual DeleteMethodParams DeleteMethodParams
        {
            get
            {
                if ((this.mDeleteMethodParams == null))
                {
                    this.mDeleteMethodParams = new DeleteMethodParams();
                }
                return this.mDeleteMethodParams;
            }
        }
        
        public virtual AssertDeleteMethodExpectedValues AssertDeleteMethodExpectedValues
        {
            get
            {
                if ((this.mAssertDeleteMethodExpectedValues == null))
                {
                    this.mAssertDeleteMethodExpectedValues = new AssertDeleteMethodExpectedValues();
                }
                return this.mAssertDeleteMethodExpectedValues;
            }
        }
        
        public virtual EditMethodParams EditMethodParams
        {
            get
            {
                if ((this.mEditMethodParams == null))
                {
                    this.mEditMethodParams = new EditMethodParams();
                }
                return this.mEditMethodParams;
            }
        }
        
        public virtual AssertEditMethodExpectedValues AssertEditMethodExpectedValues
        {
            get
            {
                if ((this.mAssertEditMethodExpectedValues == null))
                {
                    this.mAssertEditMethodExpectedValues = new AssertEditMethodExpectedValues();
                }
                return this.mAssertEditMethodExpectedValues;
            }
        }
        
        public virtual AssertFreeSlotMethodExpectedValues AssertFreeSlotMethodExpectedValues
        {
            get
            {
                if ((this.mAssertFreeSlotMethodExpectedValues == null))
                {
                    this.mAssertFreeSlotMethodExpectedValues = new AssertFreeSlotMethodExpectedValues();
                }
                return this.mAssertFreeSlotMethodExpectedValues;
            }
        }
        
        public virtual InvalidDeleteMethodParams InvalidDeleteMethodParams
        {
            get
            {
                if ((this.mInvalidDeleteMethodParams == null))
                {
                    this.mInvalidDeleteMethodParams = new InvalidDeleteMethodParams();
                }
                return this.mInvalidDeleteMethodParams;
            }
        }
        
        public virtual AssertInvalidDeleteMethodExpectedValues AssertInvalidDeleteMethodExpectedValues
        {
            get
            {
                if ((this.mAssertInvalidDeleteMethodExpectedValues == null))
                {
                    this.mAssertInvalidDeleteMethodExpectedValues = new AssertInvalidDeleteMethodExpectedValues();
                }
                return this.mAssertInvalidDeleteMethodExpectedValues;
            }
        }
        
        public virtual RedoMethodParams RedoMethodParams
        {
            get
            {
                if ((this.mRedoMethodParams == null))
                {
                    this.mRedoMethodParams = new RedoMethodParams();
                }
                return this.mRedoMethodParams;
            }
        }
        
        public virtual AssertRedoMethodExpectedValues AssertRedoMethodExpectedValues
        {
            get
            {
                if ((this.mAssertRedoMethodExpectedValues == null))
                {
                    this.mAssertRedoMethodExpectedValues = new AssertRedoMethodExpectedValues();
                }
                return this.mAssertRedoMethodExpectedValues;
            }
        }
        
        public virtual SearchMethodParams SearchMethodParams
        {
            get
            {
                if ((this.mSearchMethodParams == null))
                {
                    this.mSearchMethodParams = new SearchMethodParams();
                }
                return this.mSearchMethodParams;
            }
        }
        
        public virtual AssertSerachMethodExpectedValues AssertSerachMethodExpectedValues
        {
            get
            {
                if ((this.mAssertSerachMethodExpectedValues == null))
                {
                    this.mAssertSerachMethodExpectedValues = new AssertSerachMethodExpectedValues();
                }
                return this.mAssertSerachMethodExpectedValues;
            }
        }
        
        public virtual SearchMethod2Params SearchMethod2Params
        {
            get
            {
                if ((this.mSearchMethod2Params == null))
                {
                    this.mSearchMethod2Params = new SearchMethod2Params();
                }
                return this.mSearchMethod2Params;
            }
        }
        
        public virtual AssertSearchMethod2ExpectedValues AssertSearchMethod2ExpectedValues
        {
            get
            {
                if ((this.mAssertSearchMethod2ExpectedValues == null))
                {
                    this.mAssertSearchMethod2ExpectedValues = new AssertSearchMethod2ExpectedValues();
                }
                return this.mAssertSearchMethod2ExpectedValues;
            }
        }
        
        public virtual trashParams trashParams
        {
            get
            {
                if ((this.mtrashParams == null))
                {
                    this.mtrashParams = new trashParams();
                }
                return this.mtrashParams;
            }
        }
        
        public virtual TwentyFourHrMethodParams TwentyFourHrMethodParams
        {
            get
            {
                if ((this.mTwentyFourHrMethodParams == null))
                {
                    this.mTwentyFourHrMethodParams = new TwentyFourHrMethodParams();
                }
                return this.mTwentyFourHrMethodParams;
            }
        }
        
        public virtual AssertTwentyFourHrMethodExpectedValues AssertTwentyFourHrMethodExpectedValues
        {
            get
            {
                if ((this.mAssertTwentyFourHrMethodExpectedValues == null))
                {
                    this.mAssertTwentyFourHrMethodExpectedValues = new AssertTwentyFourHrMethodExpectedValues();
                }
                return this.mAssertTwentyFourHrMethodExpectedValues;
            }
        }
        
        public virtual UndoMethodParams UndoMethodParams
        {
            get
            {
                if ((this.mUndoMethodParams == null))
                {
                    this.mUndoMethodParams = new UndoMethodParams();
                }
                return this.mUndoMethodParams;
            }
        }
        
        public virtual AssertUndoMethodExpectedValues AssertUndoMethodExpectedValues
        {
            get
            {
                if ((this.mAssertUndoMethodExpectedValues == null))
                {
                    this.mAssertUndoMethodExpectedValues = new AssertUndoMethodExpectedValues();
                }
                return this.mAssertUndoMethodExpectedValues;
            }
        }
        
        public virtual AddEventMethodParams AddEventMethodParams
        {
            get
            {
                if ((this.mAddEventMethodParams == null))
                {
                    this.mAddEventMethodParams = new AddEventMethodParams();
                }
                return this.mAddEventMethodParams;
            }
        }
        
        public virtual AddMethodExpectedValues AddMethodExpectedValues
        {
            get
            {
                if ((this.mAddMethodExpectedValues == null))
                {
                    this.mAddMethodExpectedValues = new AddMethodExpectedValues();
                }
                return this.mAddMethodExpectedValues;
            }
        }
        
        public virtual FreeSlotMethodExpectedValues FreeSlotMethodExpectedValues
        {
            get
            {
                if ((this.mFreeSlotMethodExpectedValues == null))
                {
                    this.mFreeSlotMethodExpectedValues = new FreeSlotMethodExpectedValues();
                }
                return this.mFreeSlotMethodExpectedValues;
            }
        }
        
        public UIMagicMemoWindow UIMagicMemoWindow
        {
            get
            {
                if ((this.mUIMagicMemoWindow == null))
                {
                    this.mUIMagicMemoWindow = new UIMagicMemoWindow();
                }
                return this.mUIMagicMemoWindow;
            }
        }
        
        public UIMagicMemoWindow1 UIMagicMemoWindow1
        {
            get
            {
                if ((this.mUIMagicMemoWindow1 == null))
                {
                    this.mUIMagicMemoWindow1 = new UIMagicMemoWindow1();
                }
                return this.mUIMagicMemoWindow1;
            }
        }
        
        public UIMicrosoftVisualCRuntWindow UIMicrosoftVisualCRuntWindow
        {
            get
            {
                if ((this.mUIMicrosoftVisualCRuntWindow == null))
                {
                    this.mUIMicrosoftVisualCRuntWindow = new UIMicrosoftVisualCRuntWindow();
                }
                return this.mUIMicrosoftVisualCRuntWindow;
            }
        }
        
        public UIMainControllerTestcpWindow UIMainControllerTestcpWindow
        {
            get
            {
                if ((this.mUIMainControllerTestcpWindow == null))
                {
                    this.mUIMainControllerTestcpWindow = new UIMainControllerTestcpWindow();
                }
                return this.mUIMainControllerTestcpWindow;
            }
        }
        #endregion
        
        #region Fields
        private AssertAddMethodExpectedValues mAssertAddMethodExpectedValues;
        
        private ClearMethodParams mClearMethodParams;
        
        private AssertClearMethodExpectedValues mAssertClearMethodExpectedValues;
        
        private DeleteMethodParams mDeleteMethodParams;
        
        private AssertDeleteMethodExpectedValues mAssertDeleteMethodExpectedValues;
        
        private EditMethodParams mEditMethodParams;
        
        private AssertEditMethodExpectedValues mAssertEditMethodExpectedValues;
        
        private AssertFreeSlotMethodExpectedValues mAssertFreeSlotMethodExpectedValues;
        
        private InvalidDeleteMethodParams mInvalidDeleteMethodParams;
        
        private AssertInvalidDeleteMethodExpectedValues mAssertInvalidDeleteMethodExpectedValues;
        
        private RedoMethodParams mRedoMethodParams;
        
        private AssertRedoMethodExpectedValues mAssertRedoMethodExpectedValues;
        
        private SearchMethodParams mSearchMethodParams;
        
        private AssertSerachMethodExpectedValues mAssertSerachMethodExpectedValues;
        
        private SearchMethod2Params mSearchMethod2Params;
        
        private AssertSearchMethod2ExpectedValues mAssertSearchMethod2ExpectedValues;
        
        private trashParams mtrashParams;
        
        private TwentyFourHrMethodParams mTwentyFourHrMethodParams;
        
        private AssertTwentyFourHrMethodExpectedValues mAssertTwentyFourHrMethodExpectedValues;
        
        private UndoMethodParams mUndoMethodParams;
        
        private AssertUndoMethodExpectedValues mAssertUndoMethodExpectedValues;
        
        private AddEventMethodParams mAddEventMethodParams;
        
        private AddMethodExpectedValues mAddMethodExpectedValues;
        
        private FreeSlotMethodExpectedValues mFreeSlotMethodExpectedValues;
        
        private UIMagicMemoWindow mUIMagicMemoWindow;
        
        private UIMagicMemoWindow1 mUIMagicMemoWindow1;
        
        private UIMicrosoftVisualCRuntWindow mUIMicrosoftVisualCRuntWindow;
        
        private UIMainControllerTestcpWindow mUIMainControllerTestcpWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertAddMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertAddMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'allTaskBox' text box equals 'Deadline Events        ///4. [7p][25/5] task4        ///Monday, 4 May 2015        ///1. [7-6p] task3        ///Monday, 11 May 2015        ///2. [6p-7, 12/5] task5        ///Saturday, 23 May 2015        ///3. [2p-3p] task1        ///Wednesday, 24 Jun 2015        ///5. [1p-5p] task2        ///        ///'
        /// </summary>
        public string UIAllTaskBoxEditText = "Deadline Events\r4. [7p][25/5] task4\rMonday, 4 May 2015\r1. [7-6p] task3\rMonday, 11" +
            " May 2015\r2. [6p-7, 12/5] task5\rSaturday, 23 May 2015\r3. [2p-3p] task1\rWednesday" +
            ", 24 Jun 2015\r5. [1p-5p] task2\r\r";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ClearMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class ClearMethodParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'clear' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText = "clear";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'add task1 on 25/4 13' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText1 = "add task1 on 25/4 13";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'add task2 on 3/5 7pm' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText2 = "add task2 on 3/5 7pm";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type 'add task3 on 4/6 11 to 2pm' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText3 = "add task3 on 4/6 11 to 2pm";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type 'clear' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText4 = "clear";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys4 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertClearMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertClearMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'allTaskBox' text box equals '        ///'
        /// </summary>
        public string UIAllTaskBoxEditText = "\r";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DeleteMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class DeleteMethodParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'clear' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText = "clear";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'add task1 on 22/5 9 to 11' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText1 = "add task1 on 22/5 9 to 11";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'add task2 on 5/6 10' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText2 = "add task2 on 5/6 10";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type 'add task3 on 19/5 11 to 7pm' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText3 = "add task3 on 19/5 11 to 7pm";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type 'add task4 by 7/5 11:59p' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText4 = "add task4 by 7/5 11:59p";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys4 = "{Enter}";
        
        /// <summary>
        /// Type 'add task6 from 8/5 to 11.5' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText5 = "add task6 from 8/5 to 11.5";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys5 = "{Enter}";
        
        /// <summary>
        /// Type 'd1{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys6 = "d1{Enter}";
        
        /// <summary>
        /// Type 's{Back}{Back}{Back}delete 2 5{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys7 = "s{Back}{Back}{Back}delete 2 5{Enter}";
        
        /// <summary>
        /// Type 'delete 1-3' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText6 = "delete 1-3";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys8 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertDeleteMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertDeleteMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'allTaskBox' text box equals '        ///'
        /// </summary>
        public string UIAllTaskBoxEditText = "\r";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class EditMethodParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'clear' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText = "clear";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'add task1 on 6/7 12 to 3:30pm' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText1 = "add task1 on 6/7 12 to 3:30pm";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'add vacation starts on 7/5 7' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText2 = "add vacation starts on 7/5 7";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type 'edit 1 vacation starts on 8/5 7 to 10' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText3 = "edit 1 vacation starts on 8/5 7 to 10";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type 'edit 2 have lunch with Ann on 6/6 12 to 13:45' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText4 = "edit 2 have lunch with Ann on 6/6 12 to 13:45";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys4 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertEditMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertEditMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'allTaskBox' text box equals 'Friday, 8 May 2015        ///1. [7-10] vacation starts        ///Saturday, 6 Jun 2015        ///2. [12p-1:30p] have lunch with Ann        ///        ///'
        /// </summary>
        public string UIAllTaskBoxEditText = "Friday, 8 May 2015\r1. [7-10] vacation starts\rSaturday, 6 Jun 2015\r2. [12p-1:30p] " +
            "have lunch with Ann\r\r";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertFreeSlotMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertFreeSlotMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'allTaskBox' text box equals '        ///'
        /// </summary>
        public string UIAllTaskBoxEditText = "\r";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InvalidDeleteMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class InvalidDeleteMethodParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'clear' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText = "clear";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'add task1 0n 4/6 11' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText1 = "add task1 0n 4/6 11";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'add task2 on 6/6 19' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText2 = "add task2 on 6/6 19";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type 'add task3 on 5/7 11 to 12' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText3 = "add task3 on 5/7 11 to 12";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type 'delete 100' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText4 = "delete 100";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys4 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertInvalidDeleteMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertInvalidDeleteMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'allTaskBox' text box equals 'Floating        ///1. task1 0n 4/6 11        ///Saturday, 6 Jun 2015        ///2. [7p-8p] task2        ///Sunday, 5 Jul 2015        ///3. [11-12p] task3        ///        ///'
        /// </summary>
        public string UIAllTaskBoxEditText = "Floating\r1. task1 0n 4/6 11\rSaturday, 6 Jun 2015\r2. [7p-8p] task2\rSunday, 5 Jul 2" +
            "015\r3. [11-12p] task3\r\r";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RedoMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class RedoMethodParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'clear' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText = "clear";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'add task1 on 7/5 11 to 3p' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText1 = "add task1 on 7/5 11 to 3p";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'add task2 by 17/5 11pm' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText2 = "add task2 by 17/5 11pm";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type 'add task3 from 11/5 6pm to 12/5 7pm' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText3 = "add task3 from 11/5 6pm to 12/5 7pm";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type 'undo ' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText4 = "undo ";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys4 = "{Enter}";
        
        /// <summary>
        /// Type 'undo' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText5 = "undo";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys5 = "{Enter}";
        
        /// <summary>
        /// Type 'undo' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText6 = "undo";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys6 = "{Enter}";
        
        /// <summary>
        /// Type 'redo' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText7 = "redo";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys7 = "{Enter}";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys8 = "{Enter}";
        
        /// <summary>
        /// Type 'redo' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText8 = "redo";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys9 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertRedoMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertRedoMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'allTaskBox' text box equals 'Deadline Events        ///3. [11p][17/5] task2        ///Thursday, 7 May 2015        ///1. [11-3p] task1        ///Monday, 11 May 2015        ///2. [6p-7p, 12/5] task3        ///        ///'
        /// </summary>
        public string UIAllTaskBoxEditText = "Deadline Events\r3. [11p][17/5] task2\rThursday, 7 May 2015\r1. [11-3p] task1\rMonday" +
            ", 11 May 2015\r2. [6p-7p, 12/5] task3\r\r";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SearchMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class SearchMethodParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'clear' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText = "clear";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'add project meeting on 6/5 12 to 18:30' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText1 = "add project meeting on 6/5 12 to 18:30";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'add meet friends in school on 19/5 11 to 3pm' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText2 = "add meet friends in school on 19/5 11 to 3pm";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type 'add have lunch with Ann from 15/5 3pm to 15/5 5pm' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText3 = "add have lunch with Ann from 15/5 3pm to 15/5 5pm";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type 'add clean the room by 13/5 12pm' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText4 = "add clean the room by 13/5 12pm";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys4 = "{Enter}";
        
        /// <summary>
        /// Type 'search clean room' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText5 = "search clean room";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys5 = "{Enter}";
        
        /// <summary>
        /// Type 'display' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText6 = "display";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys6 = "{Enter}";
        
        /// <summary>
        /// Type 'search the in lun' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText7 = "search the in lun";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys7 = "{Enter}";
        
        /// <summary>
        /// Type 'search lun' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText8 = "search lun";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys8 = "{Enter}";
        
        /// <summary>
        /// Type 'search ing' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText9 = "search ing";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys9 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertSerachMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertSerachMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'allTaskBox' text box equals 'Tuesday, 19 May 2015        ///4. [11-3p] meet friends in school        ///Wednesday, 6 May 2015        ///1. [12p-6:30p] project meeting        ///        ///'
        /// </summary>
        public string UIAllTaskBoxEditText = "Tuesday, 19 May 2015\r4. [11-3p] meet friends in school\rWednesday, 6 May 2015\r1. [" +
            "12p-6:30p] project meeting\r\r";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SearchMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class SearchMethod2Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'clear' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText = "clear";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'add hahaha on 15/5 22:33' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText1 = "add hahaha on 15/5 22:33";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'add task manager to be installed by 16/6 12p' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText2 = "add task manager to be installed by 16/6 12p";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type 'add finish report by 7/5 11:59p' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText3 = "add finish report by 7/5 11:59p";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type 'add have lunch with friends from 11/5 to 12/5 12' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText4 = "add have lunch with friends from 11/5 to 12/5 12";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys4 = "{Enter}";
        
        /// <summary>
        /// Type 'add do laundry on 9/5 13:30' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText5 = "add do laundry on 9/5 13:30";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys5 = "{Enter}";
        
        /// <summary>
        /// Type 'search 12p 16/6' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText6 = "search 12p 16/6";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys6 = "{Enter}";
        
        /// <summary>
        /// Type 'd{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys7 = "d{Enter}";
        
        /// <summary>
        /// Type 'search 12p-1p 11/5' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText7 = "search 12p-1p 11/5";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys8 = "{Enter}";
        
        /// <summary>
        /// Type 'display' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText8 = "display";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys9 = "{Enter}";
        
        /// <summary>
        /// Type 'search ' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText9 = "search ";
        
        /// <summary>
        /// Type 'search 10:33p 15 may' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText10 = "search 10:33p 15 may";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys10 = "{Enter}";
        
        /// <summary>
        /// Type 'display' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText11 = "display";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys11 = "{Enter}";
        
        /// <summary>
        /// Type 'search 10:33p-11:33p 15/5' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText12 = "search 10:33p-11:33p 15/5";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys12 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertSearchMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertSearchMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'allTaskBox' text box equals 'Friday, 15 May 2015        ///4. [10:33p-11:33p] hahaha        ///        ///'
        /// </summary>
        public string UIAllTaskBoxEditText = "Friday, 15 May 2015\r4. [10:33p-11:33p] hahaha\r\r";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'trash'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class trashParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'clear' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText = "clear";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'add task1 on 7/7 6p' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText1 = "add task1 on 7/7 6p";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'add tsk2 by 5/6 3:45pm' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText2 = "add tsk2 by 5/6 3:45pm";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type 'add task3 on 15/5 4pm to 12p' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText3 = "add task3 on 15/5 4pm to 12p";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys3 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TwentyFourHrMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class TwentyFourHrMethodParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'clear' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText = "clear";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'add task1 on 7/7 17 ' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText1 = "add task1 on 7/7 17 ";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'add task3 on 5/5 14:44 to 23:59' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText2 = "add task3 on 5/5 14:44 to 23:59";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys2 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertTwentyFourHrMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertTwentyFourHrMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'allTaskBox' text box equals 'Tuesday, 5 May 2015        ///2. [2:44p-11:59p] task3        ///Tuesday, 7 Jul 2015        ///3. [5p-6p] task1        ///        ///'
        /// </summary>
        public string UIAllTaskBoxEditText = "Tuesday, 5 May 2015\r2. [2:44p-11:59p] task3\rTuesday, 7 Jul 2015\r3. [5p-6p] task1\r" +
            "\r";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'UndoMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UndoMethodParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'clear' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText = "clear";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'add task1 on 5/5 12:32' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText1 = "add task1 on 5/5 12:32";
        
        /// <summary>
        /// Type '{Left}{Left}{Left}{Left}{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys1 = "{Left}{Left}{Left}{Left}{Enter}";
        
        /// <summary>
        /// Type 'add task2 on 6/7 4pm' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText2 = "add task2 on 6/7 4pm";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type 'u{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys3 = "u{Enter}";
        
        /// <summary>
        /// Type 'u{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys4 = "u{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertUndoMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertUndoMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'allTaskBox' text box equals '        ///'
        /// </summary>
        public string UIAllTaskBoxEditText = "\r";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddEventMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AddEventMethodParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'clear' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText = "clear";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'add testing1 on 19/6 4' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText1 = "add testing1 on 19/6 4";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'add testing2 on 20/5' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText2 = "add testing2 on 20/5";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type 'add testing 3 from 19 may 3p to 20 may 4p' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText3 = "add testing 3 from 19 may 3p to 20 may 4p";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type 'add expired event on 12/1 4' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText4 = "add expired event on 12/1 4";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys4 = "{Enter}";
        
        /// <summary>
        /// Type 'add deadline event by 31 dec 23:59' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText5 = "add deadline event by 31 dec 23:59";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys5 = "{Enter}";
        
        /// <summary>
        /// Type '12' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText6 = "12";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys6 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AddMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'allTaskBox' text box equals 'Edit'
        /// </summary>
        public string UIAllTaskBoxEditControlType = "Edit";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FreeSlotMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class FreeSlotMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'allTaskBox' text box equals 'Wednesday, 12 Aug 2015        ///1. [9-11p] 14 hours        ///        ///'
        /// </summary>
        public string UIAllTaskBoxEditText = "Wednesday, 12 Aug 2015\r1. [9-11p] 14 hours\r\r";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIMagicMemoWindow : WinWindow
    {
        
        public UIMagicMemoWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Magic Memo";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Magic Memo");
            #endregion
        }
        
        #region Properties
        public UICommandInputBoxWindow UICommandInputBoxWindow
        {
            get
            {
                if ((this.mUICommandInputBoxWindow == null))
                {
                    this.mUICommandInputBoxWindow = new UICommandInputBoxWindow(this);
                }
                return this.mUICommandInputBoxWindow;
            }
        }
        
        public UIAllTaskBoxWindow UIAllTaskBoxWindow
        {
            get
            {
                if ((this.mUIAllTaskBoxWindow == null))
                {
                    this.mUIAllTaskBoxWindow = new UIAllTaskBoxWindow(this);
                }
                return this.mUIAllTaskBoxWindow;
            }
        }
        
        public UICommandInputBoxWindow1 UICommandInputBoxWindow1
        {
            get
            {
                if ((this.mUICommandInputBoxWindow1 == null))
                {
                    this.mUICommandInputBoxWindow1 = new UICommandInputBoxWindow1(this);
                }
                return this.mUICommandInputBoxWindow1;
            }
        }
        
        public UICommandInputBoxWindow2 UICommandInputBoxWindow2
        {
            get
            {
                if ((this.mUICommandInputBoxWindow2 == null))
                {
                    this.mUICommandInputBoxWindow2 = new UICommandInputBoxWindow2(this);
                }
                return this.mUICommandInputBoxWindow2;
            }
        }
        
        public UICommandInputBoxWindow3 UICommandInputBoxWindow3
        {
            get
            {
                if ((this.mUICommandInputBoxWindow3 == null))
                {
                    this.mUICommandInputBoxWindow3 = new UICommandInputBoxWindow3(this);
                }
                return this.mUICommandInputBoxWindow3;
            }
        }
        
        public UICommandInputBoxWindow4 UICommandInputBoxWindow4
        {
            get
            {
                if ((this.mUICommandInputBoxWindow4 == null))
                {
                    this.mUICommandInputBoxWindow4 = new UICommandInputBoxWindow4(this);
                }
                return this.mUICommandInputBoxWindow4;
            }
        }
        
        public UICommandInputBoxWindow5 UICommandInputBoxWindow5
        {
            get
            {
                if ((this.mUICommandInputBoxWindow5 == null))
                {
                    this.mUICommandInputBoxWindow5 = new UICommandInputBoxWindow5(this);
                }
                return this.mUICommandInputBoxWindow5;
            }
        }
        
        public UICommandInputBoxWindow6 UICommandInputBoxWindow6
        {
            get
            {
                if ((this.mUICommandInputBoxWindow6 == null))
                {
                    this.mUICommandInputBoxWindow6 = new UICommandInputBoxWindow6(this);
                }
                return this.mUICommandInputBoxWindow6;
            }
        }
        
        public UICommandInputBoxWindow7 UICommandInputBoxWindow7
        {
            get
            {
                if ((this.mUICommandInputBoxWindow7 == null))
                {
                    this.mUICommandInputBoxWindow7 = new UICommandInputBoxWindow7(this);
                }
                return this.mUICommandInputBoxWindow7;
            }
        }
        
        public UICommandInputBoxWindow8 UICommandInputBoxWindow8
        {
            get
            {
                if ((this.mUICommandInputBoxWindow8 == null))
                {
                    this.mUICommandInputBoxWindow8 = new UICommandInputBoxWindow8(this);
                }
                return this.mUICommandInputBoxWindow8;
            }
        }
        
        public UICommandInputBoxWindow9 UICommandInputBoxWindow9
        {
            get
            {
                if ((this.mUICommandInputBoxWindow9 == null))
                {
                    this.mUICommandInputBoxWindow9 = new UICommandInputBoxWindow9(this);
                }
                return this.mUICommandInputBoxWindow9;
            }
        }
        
        public UICommandInputBoxWindow10 UICommandInputBoxWindow10
        {
            get
            {
                if ((this.mUICommandInputBoxWindow10 == null))
                {
                    this.mUICommandInputBoxWindow10 = new UICommandInputBoxWindow10(this);
                }
                return this.mUICommandInputBoxWindow10;
            }
        }
        
        public UICommandInputBoxWindow11 UICommandInputBoxWindow11
        {
            get
            {
                if ((this.mUICommandInputBoxWindow11 == null))
                {
                    this.mUICommandInputBoxWindow11 = new UICommandInputBoxWindow11(this);
                }
                return this.mUICommandInputBoxWindow11;
            }
        }
        
        public UICommandInputBoxWindow12 UICommandInputBoxWindow12
        {
            get
            {
                if ((this.mUICommandInputBoxWindow12 == null))
                {
                    this.mUICommandInputBoxWindow12 = new UICommandInputBoxWindow12(this);
                }
                return this.mUICommandInputBoxWindow12;
            }
        }
        
        public UIDeletedlinenumbers12Window UIDeletedlinenumbers12Window
        {
            get
            {
                if ((this.mUIDeletedlinenumbers12Window == null))
                {
                    this.mUIDeletedlinenumbers12Window = new UIDeletedlinenumbers12Window(this);
                }
                return this.mUIDeletedlinenumbers12Window;
            }
        }
        
        public UITodayTaskBoxWindow UITodayTaskBoxWindow
        {
            get
            {
                if ((this.mUITodayTaskBoxWindow == null))
                {
                    this.mUITodayTaskBoxWindow = new UITodayTaskBoxWindow(this);
                }
                return this.mUITodayTaskBoxWindow;
            }
        }
        
        public UIMagicMemoClient UIMagicMemoClient
        {
            get
            {
                if ((this.mUIMagicMemoClient == null))
                {
                    this.mUIMagicMemoClient = new UIMagicMemoClient(this);
                }
                return this.mUIMagicMemoClient;
            }
        }
        
        public UICommandInputBoxWindow13 UICommandInputBoxWindow13
        {
            get
            {
                if ((this.mUICommandInputBoxWindow13 == null))
                {
                    this.mUICommandInputBoxWindow13 = new UICommandInputBoxWindow13(this);
                }
                return this.mUICommandInputBoxWindow13;
            }
        }
        
        public UICommandInputBoxWindow14 UICommandInputBoxWindow14
        {
            get
            {
                if ((this.mUICommandInputBoxWindow14 == null))
                {
                    this.mUICommandInputBoxWindow14 = new UICommandInputBoxWindow14(this);
                }
                return this.mUICommandInputBoxWindow14;
            }
        }
        
        public UICommandInputBoxWindow15 UICommandInputBoxWindow15
        {
            get
            {
                if ((this.mUICommandInputBoxWindow15 == null))
                {
                    this.mUICommandInputBoxWindow15 = new UICommandInputBoxWindow15(this);
                }
                return this.mUICommandInputBoxWindow15;
            }
        }
        
        public UICommandInputBoxWindow16 UICommandInputBoxWindow16
        {
            get
            {
                if ((this.mUICommandInputBoxWindow16 == null))
                {
                    this.mUICommandInputBoxWindow16 = new UICommandInputBoxWindow16(this);
                }
                return this.mUICommandInputBoxWindow16;
            }
        }
        
        public UICommandInputBoxWindow17 UICommandInputBoxWindow17
        {
            get
            {
                if ((this.mUICommandInputBoxWindow17 == null))
                {
                    this.mUICommandInputBoxWindow17 = new UICommandInputBoxWindow17(this);
                }
                return this.mUICommandInputBoxWindow17;
            }
        }
        
        public UICommandInputBoxWindow18 UICommandInputBoxWindow18
        {
            get
            {
                if ((this.mUICommandInputBoxWindow18 == null))
                {
                    this.mUICommandInputBoxWindow18 = new UICommandInputBoxWindow18(this);
                }
                return this.mUICommandInputBoxWindow18;
            }
        }
        
        public UICommandInputBoxWindow19 UICommandInputBoxWindow19
        {
            get
            {
                if ((this.mUICommandInputBoxWindow19 == null))
                {
                    this.mUICommandInputBoxWindow19 = new UICommandInputBoxWindow19(this);
                }
                return this.mUICommandInputBoxWindow19;
            }
        }
        #endregion
        
        #region Fields
        private UICommandInputBoxWindow mUICommandInputBoxWindow;
        
        private UIAllTaskBoxWindow mUIAllTaskBoxWindow;
        
        private UICommandInputBoxWindow1 mUICommandInputBoxWindow1;
        
        private UICommandInputBoxWindow2 mUICommandInputBoxWindow2;
        
        private UICommandInputBoxWindow3 mUICommandInputBoxWindow3;
        
        private UICommandInputBoxWindow4 mUICommandInputBoxWindow4;
        
        private UICommandInputBoxWindow5 mUICommandInputBoxWindow5;
        
        private UICommandInputBoxWindow6 mUICommandInputBoxWindow6;
        
        private UICommandInputBoxWindow7 mUICommandInputBoxWindow7;
        
        private UICommandInputBoxWindow8 mUICommandInputBoxWindow8;
        
        private UICommandInputBoxWindow9 mUICommandInputBoxWindow9;
        
        private UICommandInputBoxWindow10 mUICommandInputBoxWindow10;
        
        private UICommandInputBoxWindow11 mUICommandInputBoxWindow11;
        
        private UICommandInputBoxWindow12 mUICommandInputBoxWindow12;
        
        private UIDeletedlinenumbers12Window mUIDeletedlinenumbers12Window;
        
        private UITodayTaskBoxWindow mUITodayTaskBoxWindow;
        
        private UIMagicMemoClient mUIMagicMemoClient;
        
        private UICommandInputBoxWindow13 mUICommandInputBoxWindow13;
        
        private UICommandInputBoxWindow14 mUICommandInputBoxWindow14;
        
        private UICommandInputBoxWindow15 mUICommandInputBoxWindow15;
        
        private UICommandInputBoxWindow16 mUICommandInputBoxWindow16;
        
        private UICommandInputBoxWindow17 mUICommandInputBoxWindow17;
        
        private UICommandInputBoxWindow18 mUICommandInputBoxWindow18;
        
        private UICommandInputBoxWindow19 mUICommandInputBoxWindow19;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow : WinWindow
    {
        
        public UICommandInputBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("Magic Memo");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Upcoming Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("Magic Memo");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIAllTaskBoxWindow : WinWindow
    {
        
        public UIAllTaskBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "allTaskBox";
            this.WindowTitles.Add("Magic Memo");
            #endregion
        }
        
        #region Properties
        public WinEdit UIAllTaskBoxEdit
        {
            get
            {
                if ((this.mUIAllTaskBoxEdit == null))
                {
                    this.mUIAllTaskBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIAllTaskBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Magic Memo";
                    this.mUIAllTaskBoxEdit.WindowTitles.Add("Magic Memo");
                    #endregion
                }
                return this.mUIAllTaskBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIAllTaskBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow1 : WinWindow
    {
        
        public UICommandInputBoxWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("Magic Memo");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Upcoming Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("Magic Memo");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow2 : WinWindow
    {
        
        public UICommandInputBoxWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("Magic Memo");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Upcoming Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("Magic Memo");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow3 : WinWindow
    {
        
        public UICommandInputBoxWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("Magic Memo");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Upcoming Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("Magic Memo");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow4 : WinWindow
    {
        
        public UICommandInputBoxWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("Magic Memo");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Upcoming Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("Magic Memo");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow5 : WinWindow
    {
        
        public UICommandInputBoxWindow5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("Magic Memo");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Upcoming Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("Magic Memo");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow6 : WinWindow
    {
        
        public UICommandInputBoxWindow6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("Magic Memo");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Upcoming Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("Magic Memo");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow7 : WinWindow
    {
        
        public UICommandInputBoxWindow7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("Magic Memo");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Upcoming Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("Magic Memo");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow8 : WinWindow
    {
        
        public UICommandInputBoxWindow8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("Magic Memo");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Upcoming Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("Magic Memo");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow9 : WinWindow
    {
        
        public UICommandInputBoxWindow9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("Magic Memo");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Upcoming Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("Magic Memo");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow10 : WinWindow
    {
        
        public UICommandInputBoxWindow10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("Magic Memo");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Upcoming Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("Magic Memo");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow11 : WinWindow
    {
        
        public UICommandInputBoxWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("Magic Memo");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Upcoming Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("Magic Memo");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow12 : WinWindow
    {
        
        public UICommandInputBoxWindow12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("Magic Memo");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Upcoming Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("Magic Memo");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIDeletedlinenumbers12Window : WinWindow
    {
        
        public UIDeletedlinenumbers12Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "successMessageLabel";
            this.WindowTitles.Add("Magic Memo");
            #endregion
        }
        
        #region Properties
        public WinText UIDeletedlinenumbers12Text
        {
            get
            {
                if ((this.mUIDeletedlinenumbers12Text == null))
                {
                    this.mUIDeletedlinenumbers12Text = new WinText(this);
                    #region Search Criteria
                    this.mUIDeletedlinenumbers12Text.SearchProperties[WinText.PropertyNames.Name] = "Deleted line numbers: 1, 2, Invalid line number specified: 3, 4, 5, 6";
                    this.mUIDeletedlinenumbers12Text.WindowTitles.Add("Magic Memo");
                    #endregion
                }
                return this.mUIDeletedlinenumbers12Text;
            }
        }
        
        public WinText UISearchresultsforaText
        {
            get
            {
                if ((this.mUISearchresultsforaText == null))
                {
                    this.mUISearchresultsforaText = new WinText(this);
                    #region Search Criteria
                    this.mUISearchresultsforaText.SearchProperties[WinText.PropertyNames.Name] = "Search results for: \"a\" ";
                    this.mUISearchresultsforaText.WindowTitles.Add("Magic Memo");
                    #endregion
                }
                return this.mUISearchresultsforaText;
            }
        }
        
        public WinText UINotificationtimechanText
        {
            get
            {
                if ((this.mUINotificationtimechanText == null))
                {
                    this.mUINotificationtimechanText = new WinText(this);
                    #region Search Criteria
                    this.mUINotificationtimechanText.SearchProperties[WinText.PropertyNames.Name] = "Notification time changed from 1 minute(s) to 1 minute(s)";
                    this.mUINotificationtimechanText.WindowTitles.Add("Magic Memo");
                    #endregion
                }
                return this.mUINotificationtimechanText;
            }
        }
        
        public WinText UIInvalidnumberspecifiText
        {
            get
            {
                if ((this.mUIInvalidnumberspecifiText == null))
                {
                    this.mUIInvalidnumberspecifiText = new WinText(this);
                    #region Search Criteria
                    this.mUIInvalidnumberspecifiText.SearchProperties[WinText.PropertyNames.Name] = "Invalid number specified!";
                    this.mUIInvalidnumberspecifiText.WindowTitles.Add("Magic Memo");
                    #endregion
                }
                return this.mUIInvalidnumberspecifiText;
            }
        }
        
        public WinText UIInvalidnumberspecifiText1
        {
            get
            {
                if ((this.mUIInvalidnumberspecifiText1 == null))
                {
                    this.mUIInvalidnumberspecifiText1 = new WinText(this);
                    #region Search Criteria
                    this.mUIInvalidnumberspecifiText1.SearchProperties[WinText.PropertyNames.Name] = "Invalid number specified!";
                    this.mUIInvalidnumberspecifiText1.WindowTitles.Add("Magic Memo");
                    #endregion
                }
                return this.mUIInvalidnumberspecifiText1;
            }
        }
        
        public WinText UIInvalidnumberspecifiText2
        {
            get
            {
                if ((this.mUIInvalidnumberspecifiText2 == null))
                {
                    this.mUIInvalidnumberspecifiText2 = new WinText(this);
                    #region Search Criteria
                    this.mUIInvalidnumberspecifiText2.SearchProperties[WinText.PropertyNames.Name] = "Invalid number specified: ?";
                    this.mUIInvalidnumberspecifiText2.WindowTitles.Add("Magic Memo");
                    #endregion
                }
                return this.mUIInvalidnumberspecifiText2;
            }
        }
        
        public WinText UIInvalidnumberspecifiText3
        {
            get
            {
                if ((this.mUIInvalidnumberspecifiText3 == null))
                {
                    this.mUIInvalidnumberspecifiText3 = new WinText(this);
                    #region Search Criteria
                    this.mUIInvalidnumberspecifiText3.SearchProperties[WinText.PropertyNames.Name] = "Invalid number specified: ?";
                    this.mUIInvalidnumberspecifiText3.WindowTitles.Add("Magic Memo");
                    #endregion
                }
                return this.mUIInvalidnumberspecifiText3;
            }
        }
        
        public WinText UIInvalidnumberspecifiText4
        {
            get
            {
                if ((this.mUIInvalidnumberspecifiText4 == null))
                {
                    this.mUIInvalidnumberspecifiText4 = new WinText(this);
                    #region Search Criteria
                    this.mUIInvalidnumberspecifiText4.SearchProperties[WinText.PropertyNames.Name] = "Invalid number specified: ?";
                    this.mUIInvalidnumberspecifiText4.WindowTitles.Add("Magic Memo");
                    #endregion
                }
                return this.mUIInvalidnumberspecifiText4;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIDeletedlinenumbers12Text;
        
        private WinText mUISearchresultsforaText;
        
        private WinText mUINotificationtimechanText;
        
        private WinText mUIInvalidnumberspecifiText;
        
        private WinText mUIInvalidnumberspecifiText1;
        
        private WinText mUIInvalidnumberspecifiText2;
        
        private WinText mUIInvalidnumberspecifiText3;
        
        private WinText mUIInvalidnumberspecifiText4;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UITodayTaskBoxWindow : WinWindow
    {
        
        public UITodayTaskBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "todayTaskBox";
            this.WindowTitles.Add("Magic Memo");
            #endregion
        }
        
        #region Properties
        public WinEdit UITodayTaskBoxEdit
        {
            get
            {
                if ((this.mUITodayTaskBoxEdit == null))
                {
                    this.mUITodayTaskBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITodayTaskBoxEdit.WindowTitles.Add("Magic Memo");
                    #endregion
                }
                return this.mUITodayTaskBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITodayTaskBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIMagicMemoClient : WinClient
    {
        
        public UIMagicMemoClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Magic Memo";
            this.WindowTitles.Add("Magic Memo");
            #endregion
        }
        
        #region Properties
        public WinWindow UIPictureBoxWindow
        {
            get
            {
                if ((this.mUIPictureBoxWindow == null))
                {
                    this.mUIPictureBoxWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIPictureBoxWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Added line: \"task4\"";
                    this.mUIPictureBoxWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIPictureBoxWindow.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
                    this.mUIPictureBoxWindow.WindowTitles.Add("Magic Memo");
                    #endregion
                }
                return this.mUIPictureBoxWindow;
            }
        }
        
        public WinWindow UICommandInputBoxWindow
        {
            get
            {
                if ((this.mUICommandInputBoxWindow == null))
                {
                    this.mUICommandInputBoxWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUICommandInputBoxWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Upcoming Tasks";
                    this.mUICommandInputBoxWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
                    this.mUICommandInputBoxWindow.WindowTitles.Add("Magic Memo");
                    #endregion
                }
                return this.mUICommandInputBoxWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIPictureBoxWindow;
        
        private WinWindow mUICommandInputBoxWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow13 : WinWindow
    {
        
        public UICommandInputBoxWindow13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("Magic Memo");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Upcoming Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("Magic Memo");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow14 : WinWindow
    {
        
        public UICommandInputBoxWindow14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("Magic Memo");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Upcoming Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("Magic Memo");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow15 : WinWindow
    {
        
        public UICommandInputBoxWindow15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("Magic Memo");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Upcoming Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("Magic Memo");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow16 : WinWindow
    {
        
        public UICommandInputBoxWindow16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("Magic Memo");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Upcoming Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("Magic Memo");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow17 : WinWindow
    {
        
        public UICommandInputBoxWindow17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("Magic Memo");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Upcoming Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("Magic Memo");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow18 : WinWindow
    {
        
        public UICommandInputBoxWindow18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("Magic Memo");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Upcoming Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("Magic Memo");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow19 : WinWindow
    {
        
        public UICommandInputBoxWindow19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("Magic Memo");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Upcoming Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("Magic Memo");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIMagicMemoWindow1 : WinWindow
    {
        
        public UIMagicMemoWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Magic Memo";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Magic Memo");
            #endregion
        }
        
        #region Properties
        public UIMagicMemoClient1 UIMagicMemoClient
        {
            get
            {
                if ((this.mUIMagicMemoClient == null))
                {
                    this.mUIMagicMemoClient = new UIMagicMemoClient1(this);
                }
                return this.mUIMagicMemoClient;
            }
        }
        #endregion
        
        #region Fields
        private UIMagicMemoClient1 mUIMagicMemoClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIMagicMemoClient1 : WinClient
    {
        
        public UIMagicMemoClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Magic Memo";
            this.WindowTitles.Add("Magic Memo");
            #endregion
        }
        
        #region Properties
        public WinButton UIQuitButton
        {
            get
            {
                if ((this.mUIQuitButton == null))
                {
                    this.mUIQuitButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIQuitButton.SearchProperties[WinButton.PropertyNames.Name] = "Quit";
                    this.mUIQuitButton.WindowTitles.Add("Magic Memo");
                    #endregion
                }
                return this.mUIQuitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIQuitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIMicrosoftVisualCRuntWindow : WinWindow
    {
        
        public UIMicrosoftVisualCRuntWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Microsoft Visual C++ Runtime Library";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Microsoft Visual C++ Runtime Library");
            #endregion
        }
        
        #region Properties
        public UI重试RWindow UI重试RWindow
        {
            get
            {
                if ((this.mUI重试RWindow == null))
                {
                    this.mUI重试RWindow = new UI重试RWindow(this);
                }
                return this.mUI重试RWindow;
            }
        }
        #endregion
        
        #region Fields
        private UI重试RWindow mUI重试RWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UI重试RWindow : WinWindow
    {
        
        public UI重试RWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "4";
            this.WindowTitles.Add("Microsoft Visual C++ Runtime Library");
            #endregion
        }
        
        #region Properties
        public WinButton UI重试RButton
        {
            get
            {
                if ((this.mUI重试RButton == null))
                {
                    this.mUI重试RButton = new WinButton(this);
                    #region Search Criteria
                    this.mUI重试RButton.SearchProperties[WinButton.PropertyNames.Name] = "重试(R)";
                    this.mUI重试RButton.WindowTitles.Add("Microsoft Visual C++ Runtime Library");
                    #endregion
                }
                return this.mUI重试RButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI重试RButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIMainControllerTestcpWindow : WinWindow
    {
        
        public UIMainControllerTestcpWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "main/ControllerTest.cpp at master · cs2103jan2015-w11-2c/main - Google Chrome";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Chrome_WidgetWin_1";
            this.WindowTitles.Add("main/ControllerTest.cpp at master · cs2103jan2015-w11-2c/main - Google Chrome");
            #endregion
        }
        
        #region Properties
        public UIChromeLegacyWindowWindow UIChromeLegacyWindowWindow
        {
            get
            {
                if ((this.mUIChromeLegacyWindowWindow == null))
                {
                    this.mUIChromeLegacyWindowWindow = new UIChromeLegacyWindowWindow(this);
                }
                return this.mUIChromeLegacyWindowWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIChromeLegacyWindowWindow mUIChromeLegacyWindowWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIChromeLegacyWindowWindow : WinWindow
    {
        
        public UIChromeLegacyWindowWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "271532200";
            this.WindowTitles.Add("main/ControllerTest.cpp at master · cs2103jan2015-w11-2c/main - Google Chrome");
            #endregion
        }
        
        #region Properties
        public WinControl UIMainControllerTestcpDocument
        {
            get
            {
                if ((this.mUIMainControllerTestcpDocument == null))
                {
                    this.mUIMainControllerTestcpDocument = new WinControl(this);
                    #region Search Criteria
                    this.mUIMainControllerTestcpDocument.SearchProperties[UITestControl.PropertyNames.ControlType] = "Document";
                    this.mUIMainControllerTestcpDocument.WindowTitles.Add("main/ControllerTest.cpp at master · cs2103jan2015-w11-2c/main - Google Chrome");
                    #endregion
                }
                return this.mUIMainControllerTestcpDocument;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIMainControllerTestcpDocument;
        #endregion
    }
}
