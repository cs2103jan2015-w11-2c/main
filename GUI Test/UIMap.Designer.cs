// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace GUI_Test
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// add 4 tasks and delete 1 and 4
        /// </summary>
        public void deleteCase1()
        {
            #region Variable Declarations
            WinEdit uICommandInputBoxEdit = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit1 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow1.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit2 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow2.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit3 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow3.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit4 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow4.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit5 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow5.UICommandInputBoxEdit;
            #endregion

            // Type 'clear' in 'commandInputBox' text box
            uICommandInputBoxEdit.Text = this.deleteCase1Params.UICommandInputBoxEditText;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit, this.deleteCase1Params.UICommandInputBoxEditSendKeys, ModifierKeys.None);

            // Type 'add task1[fri 18' in 'commandInputBox' text box
            uICommandInputBoxEdit1.Text = this.deleteCase1Params.UICommandInputBoxEditText1;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit1, this.deleteCase1Params.UICommandInputBoxEditSendKeys1, ModifierKeys.None);

            // Type 'add task 2[3/4 17' in 'commandInputBox' text box
            uICommandInputBoxEdit2.Text = this.deleteCase1Params.UICommandInputBoxEditText2;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit2, this.deleteCase1Params.UICommandInputBoxEditSendKeys2, ModifierKeys.None);

            // Type 'add task3[sun 19 - 21' in 'commandInputBox' text box
            uICommandInputBoxEdit3.Text = this.deleteCase1Params.UICommandInputBoxEditText3;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit3, this.deleteCase1Params.UICommandInputBoxEditSendKeys3, ModifierKeys.None);

            // Type 'add task4[/ 18 - 19:20' in 'commandInputBox' text box
            uICommandInputBoxEdit4.Text = this.deleteCase1Params.UICommandInputBoxEditText4;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit4, this.deleteCase1Params.UICommandInputBoxEditSendKeys4, ModifierKeys.None);

            // Type 'delete 1 4 ' in 'commandInputBox' text box
            uICommandInputBoxEdit5.Text = this.deleteCase1Params.UICommandInputBoxEditText5;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit5, this.deleteCase1Params.UICommandInputBoxEditSendKeys5, ModifierKeys.None);
        }
        
        /// <summary>
        /// add by full and short form of weekday, add by date
        /// </summary>
        public void addCase1()
        {
            #region Variable Declarations
            WinEdit uICommandInputBoxEdit = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit1 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow1.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit2 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow2.UICommandInputBoxEdit;
            WinEdit uIAllTaskBoxEdit = this.UIMagicMemoGUIWindow.UIAllTaskBoxWindow.UIAllTaskBoxEdit;
            WinEdit uICommandInputBoxEdit3 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow3.UICommandInputBoxEdit;
            #endregion

            // Type 'clear' in 'commandInputBox' text box
            uICommandInputBoxEdit.Text = this.addCase1Params.UICommandInputBoxEditText;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit, this.addCase1Params.UICommandInputBoxEditSendKeys, ModifierKeys.None);

            // Type 'add task1[thursday 19 - 20' in 'commandInputBox' text box
            uICommandInputBoxEdit1.Text = this.addCase1Params.UICommandInputBoxEditText1;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit1, this.addCase1Params.UICommandInputBoxEditSendKeys1, ModifierKeys.None);

            // Type 'add ' in 'commandInputBox' text box
            uICommandInputBoxEdit2.Text = this.addCase1Params.UICommandInputBoxEditText2;

            // Type 't' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit2, this.addCase1Params.UICommandInputBoxEditSendKeys2, ModifierKeys.None);

            // Click 'allTaskBox' text box
            Mouse.Click(uIAllTaskBoxEdit, new Point(6, 161));

            // Type 'add task2[5/4/2015 7p' in 'commandInputBox' text box
            uICommandInputBoxEdit2.Text = this.addCase1Params.UICommandInputBoxEditText3;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit2, this.addCase1Params.UICommandInputBoxEditSendKeys3, ModifierKeys.None);

            // Type 'add task3[' in 'commandInputBox' text box
            uICommandInputBoxEdit3.Text = this.addCase1Params.UICommandInputBoxEditText4;

            // Type 'add task3[fri 11 - 13' in 'commandInputBox' text box
            uICommandInputBoxEdit3.Text = this.addCase1Params.UICommandInputBoxEditText5;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit3, this.addCase1Params.UICommandInputBoxEditSendKeys4, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertAddCase11 - Use 'AssertAddCase11ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertAddCase11()
        {
            #region Variable Declarations
            WinEdit uIAllTaskBoxEdit = this.UIMagicMemoGUIWindow.UIAllTaskBoxWindow.UIAllTaskBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'allTaskBox' text box equals 'Friday, 3 Apr 2015            //1. [11-1pm] task3            //Sunday, 5 Apr 2015            //2. [7] task2            //Thursday, 9 Apr 2015            //3. [7-8pm] task1            //            //'
            Assert.AreEqual(this.AssertAddCase11ExpectedValues.UIAllTaskBoxEditText, uIAllTaskBoxEdit.Text);
        }
        
        /// <summary>
        /// AssertDeleteCase1 - Use 'AssertDeleteCase1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertDeleteCase1()
        {
            #region Variable Declarations
            WinEdit uIAllTaskBoxEdit = this.UIMagicMemoGUIWindow.UIAllTaskBoxWindow.UIAllTaskBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'allTaskBox' text box equals 'Friday, 3 Apr 2015            //1. [5pm] task 2            //2. [6pm] task1            //            //'
            Assert.AreEqual(this.AssertDeleteCase1ExpectedValues.UIAllTaskBoxEditText, uIAllTaskBoxEdit.Text);
        }
        
        /// <summary>
        /// add two tasks and edit task1(change task description and time)
        /// </summary>
        public void editCase1()
        {
            #region Variable Declarations
            WinEdit uICommandInputBoxEdit = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit1 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow1.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit2 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow2.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit3 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow3.UICommandInputBoxEdit;
            #endregion

            // Type 'clear' in 'commandInputBox' text box
            uICommandInputBoxEdit.Text = this.editCase1Params.UICommandInputBoxEditText;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit, this.editCase1Params.UICommandInputBoxEditSendKeys, ModifierKeys.None);

            // Type 'add task1[sun 10 - 14' in 'commandInputBox' text box
            uICommandInputBoxEdit1.Text = this.editCase1Params.UICommandInputBoxEditText1;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit1, this.editCase1Params.UICommandInputBoxEditSendKeys1, ModifierKeys.None);

            // Type 'add task2[6/4/2015 19' in 'commandInputBox' text box
            uICommandInputBoxEdit2.Text = this.editCase1Params.UICommandInputBoxEditText2;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit2, this.editCase1Params.UICommandInputBoxEditSendKeys2, ModifierKeys.None);

            // Type 'edit 1 task1-have dinner with ann[sun 19 -22' in 'commandInputBox' text box
            uICommandInputBoxEdit3.Text = this.editCase1Params.UICommandInputBoxEditText3;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit3, this.editCase1Params.UICommandInputBoxEditSendKeys3, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertEditCase1 - Use 'AssertEditCase1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertEditCase1()
        {
            #region Variable Declarations
            WinEdit uIAllTaskBoxEdit = this.UIMagicMemoGUIWindow.UIAllTaskBoxWindow.UIAllTaskBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'allTaskBox' text box equals 'Sunday, 5 Apr 2015            //1. [7pm] task1-have dinner with ann            //Monday, 6 Apr 2015            //2. [7pm] task2            //            //'
            Assert.AreEqual(this.AssertEditCase1ExpectedValues.UIAllTaskBoxEditText, uIAllTaskBoxEdit.Text);
        }
        
        /// <summary>
        /// add two clash task and undo second one
        /// </summary>
        public void undoCase1()
        {
            #region Variable Declarations
            WinEdit uICommandInputBoxEdit = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit1 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow1.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit2 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow2.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit3 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow3.UICommandInputBoxEdit;
            #endregion

            // Type 'clear' in 'commandInputBox' text box
            uICommandInputBoxEdit.Text = this.undoCase1Params.UICommandInputBoxEditText;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit, this.undoCase1Params.UICommandInputBoxEditSendKeys, ModifierKeys.None);

            // Type 'add task1[sun 19' in 'commandInputBox' text box
            uICommandInputBoxEdit1.Text = this.undoCase1Params.UICommandInputBoxEditText1;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit1, this.undoCase1Params.UICommandInputBoxEditSendKeys1, ModifierKeys.None);

            // Type 'add task2[5/4/2015 19' in 'commandInputBox' text box
            uICommandInputBoxEdit2.Text = this.undoCase1Params.UICommandInputBoxEditText2;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit2, this.undoCase1Params.UICommandInputBoxEditSendKeys2, ModifierKeys.None);

            // Type 'undo' in 'commandInputBox' text box
            uICommandInputBoxEdit3.Text = this.undoCase1Params.UICommandInputBoxEditText3;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit3, this.undoCase1Params.UICommandInputBoxEditSendKeys3, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertUndoCase1 - Use 'AssertUndoCase1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertUndoCase1()
        {
            #region Variable Declarations
            WinEdit uIAllTaskBoxEdit = this.UIMagicMemoGUIWindow.UIAllTaskBoxWindow.UIAllTaskBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'allTaskBox' text box equals 'Sunday, 5 Apr 2015            //1. [7pm] task1            //            //'
            Assert.AreEqual(this.AssertUndoCase1ExpectedValues.UIAllTaskBoxEditText, uIAllTaskBoxEdit.Text);
        }
        
        /// <summary>
        /// two consecutive undo actions
        /// </summary>
        public void undoCase2()
        {
            #region Variable Declarations
            WinEdit uICommandInputBoxEdit = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit1 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow1.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit2 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow2.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit3 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow3.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit4 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow4.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit5 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow5.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit6 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow6.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit7 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow7.UICommandInputBoxEdit;
            #endregion

            // Type 'clear' in 'commandInputBox' text box
            uICommandInputBoxEdit.Text = this.undoCase2Params.UICommandInputBoxEditText;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit, this.undoCase2Params.UICommandInputBoxEditSendKeys, ModifierKeys.None);

            // Type 'add task1[fri 5 - 6' in 'commandInputBox' text box
            uICommandInputBoxEdit1.Text = this.undoCase2Params.UICommandInputBoxEditText1;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit1, this.undoCase2Params.UICommandInputBoxEditSendKeys1, ModifierKeys.None);

            // Type 'add task2[5/4/2015 16' in 'commandInputBox' text box
            uICommandInputBoxEdit2.Text = this.undoCase2Params.UICommandInputBoxEditText2;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit2, this.undoCase2Params.UICommandInputBoxEditSendKeys2, ModifierKeys.None);

            // Type 'add task3[sat 19 - 22' in 'commandInputBox' text box
            uICommandInputBoxEdit3.Text = this.undoCase2Params.UICommandInputBoxEditText3;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit3, this.undoCase2Params.UICommandInputBoxEditSendKeys3, ModifierKeys.None);

            // Type 'edit 2 task3[sat 19 - 23' in 'commandInputBox' text box
            uICommandInputBoxEdit4.Text = this.undoCase2Params.UICommandInputBoxEditText4;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit4, this.undoCase2Params.UICommandInputBoxEditSendKeys4, ModifierKeys.None);

            // Type 'add task4[15/4/2015 11 - 12' in 'commandInputBox' text box
            uICommandInputBoxEdit5.Text = this.undoCase2Params.UICommandInputBoxEditText5;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit5, this.undoCase2Params.UICommandInputBoxEditSendKeys5, ModifierKeys.None);

            // Last mouse action was not recorded.

            // Type 'undo' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit6, this.undoCase2Params.UICommandInputBoxEditSendKeys6, ModifierKeys.None);

            // Click 'commandInputBox' text box
            Mouse.Click(uICommandInputBoxEdit6, new Point(382, 5));

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit6, this.undoCase2Params.UICommandInputBoxEditSendKeys7, ModifierKeys.None);

            // Type 'undo{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit7, this.undoCase2Params.UICommandInputBoxEditSendKeys8, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertUndoCase2 - Use 'AssertUndoCase2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertUndoCase2()
        {
            #region Variable Declarations
            WinEdit uIAllTaskBoxEdit = this.UIMagicMemoGUIWindow.UIAllTaskBoxWindow.UIAllTaskBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'allTaskBox' text box equals 'Friday, 3 Apr 2015            //1. [5-6] task1            //Saturday, 4 Apr 2015            //2. [7-10pm] task3            //Sunday, 5 Apr 2015            //3. [4pm] task2            //            //'
            Assert.AreEqual(this.AssertUndoCase2ExpectedValues.UIAllTaskBoxEditText, uIAllTaskBoxEdit.Text);
        }
        
        #region Properties
        public virtual deleteCase1Params deleteCase1Params
        {
            get
            {
                if ((this.mdeleteCase1Params == null))
                {
                    this.mdeleteCase1Params = new deleteCase1Params();
                }
                return this.mdeleteCase1Params;
            }
        }
        
        public virtual addCase1Params addCase1Params
        {
            get
            {
                if ((this.maddCase1Params == null))
                {
                    this.maddCase1Params = new addCase1Params();
                }
                return this.maddCase1Params;
            }
        }
        
        public virtual AssertAddCase11ExpectedValues AssertAddCase11ExpectedValues
        {
            get
            {
                if ((this.mAssertAddCase11ExpectedValues == null))
                {
                    this.mAssertAddCase11ExpectedValues = new AssertAddCase11ExpectedValues();
                }
                return this.mAssertAddCase11ExpectedValues;
            }
        }
        
        public virtual AssertDeleteCase1ExpectedValues AssertDeleteCase1ExpectedValues
        {
            get
            {
                if ((this.mAssertDeleteCase1ExpectedValues == null))
                {
                    this.mAssertDeleteCase1ExpectedValues = new AssertDeleteCase1ExpectedValues();
                }
                return this.mAssertDeleteCase1ExpectedValues;
            }
        }
        
        public virtual editCase1Params editCase1Params
        {
            get
            {
                if ((this.meditCase1Params == null))
                {
                    this.meditCase1Params = new editCase1Params();
                }
                return this.meditCase1Params;
            }
        }
        
        public virtual AssertEditCase1ExpectedValues AssertEditCase1ExpectedValues
        {
            get
            {
                if ((this.mAssertEditCase1ExpectedValues == null))
                {
                    this.mAssertEditCase1ExpectedValues = new AssertEditCase1ExpectedValues();
                }
                return this.mAssertEditCase1ExpectedValues;
            }
        }
        
        public virtual undoCase1Params undoCase1Params
        {
            get
            {
                if ((this.mundoCase1Params == null))
                {
                    this.mundoCase1Params = new undoCase1Params();
                }
                return this.mundoCase1Params;
            }
        }
        
        public virtual AssertUndoCase1ExpectedValues AssertUndoCase1ExpectedValues
        {
            get
            {
                if ((this.mAssertUndoCase1ExpectedValues == null))
                {
                    this.mAssertUndoCase1ExpectedValues = new AssertUndoCase1ExpectedValues();
                }
                return this.mAssertUndoCase1ExpectedValues;
            }
        }
        
        public virtual undoCase2Params undoCase2Params
        {
            get
            {
                if ((this.mundoCase2Params == null))
                {
                    this.mundoCase2Params = new undoCase2Params();
                }
                return this.mundoCase2Params;
            }
        }
        
        public virtual AssertUndoCase2ExpectedValues AssertUndoCase2ExpectedValues
        {
            get
            {
                if ((this.mAssertUndoCase2ExpectedValues == null))
                {
                    this.mAssertUndoCase2ExpectedValues = new AssertUndoCase2ExpectedValues();
                }
                return this.mAssertUndoCase2ExpectedValues;
            }
        }
        
        public UIMagicMemoGUIWindow UIMagicMemoGUIWindow
        {
            get
            {
                if ((this.mUIMagicMemoGUIWindow == null))
                {
                    this.mUIMagicMemoGUIWindow = new UIMagicMemoGUIWindow();
                }
                return this.mUIMagicMemoGUIWindow;
            }
        }
        #endregion
        
        #region Fields
        private deleteCase1Params mdeleteCase1Params;
        
        private addCase1Params maddCase1Params;
        
        private AssertAddCase11ExpectedValues mAssertAddCase11ExpectedValues;
        
        private AssertDeleteCase1ExpectedValues mAssertDeleteCase1ExpectedValues;
        
        private editCase1Params meditCase1Params;
        
        private AssertEditCase1ExpectedValues mAssertEditCase1ExpectedValues;
        
        private undoCase1Params mundoCase1Params;
        
        private AssertUndoCase1ExpectedValues mAssertUndoCase1ExpectedValues;
        
        private undoCase2Params mundoCase2Params;
        
        private AssertUndoCase2ExpectedValues mAssertUndoCase2ExpectedValues;
        
        private UIMagicMemoGUIWindow mUIMagicMemoGUIWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'deleteCase1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class deleteCase1Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'clear' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText = "clear";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'add task1[fri 18' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText1 = "add task1[fri 18";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'add task 2[3/4 17' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText2 = "add task 2[3/4 17";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type 'add task3[sun 19 - 21' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText3 = "add task3[sun 19 - 21";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type 'add task4[/ 18 - 19:20' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText4 = "add task4[/ 18 - 19:20";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys4 = "{Enter}";
        
        /// <summary>
        /// Type 'delete 1 4 ' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText5 = "delete 1 4 ";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys5 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'addCase1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class addCase1Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'clear' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText = "clear";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'add task1[thursday 19 - 20' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText1 = "add task1[thursday 19 - 20";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'add ' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText2 = "add ";
        
        /// <summary>
        /// Type 't' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys2 = "t";
        
        /// <summary>
        /// Type 'add task2[5/4/2015 7p' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText3 = "add task2[5/4/2015 7p";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type 'add task3[' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText4 = "add task3[";
        
        /// <summary>
        /// Type 'add task3[fri 11 - 13' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText5 = "add task3[fri 11 - 13";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys4 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertAddCase11'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertAddCase11ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'allTaskBox' text box equals 'Friday, 3 Apr 2015        ///1. [11-1pm] task3        ///Sunday, 5 Apr 2015        ///2. [7] task2        ///Thursday, 9 Apr 2015        ///3. [7-8pm] task1        ///        ///'
        /// </summary>
        public string UIAllTaskBoxEditText = "Friday, 3 Apr 2015\r1. [11-1pm] task3\rSunday, 5 Apr 2015\r2. [7] task2\rThursday, 9 " +
            "Apr 2015\r3. [7-8pm] task1\r\r";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertDeleteCase1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertDeleteCase1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'allTaskBox' text box equals 'Friday, 3 Apr 2015        ///1. [5pm] task 2        ///2. [6pm] task1        ///        ///'
        /// </summary>
        public string UIAllTaskBoxEditText = "Friday, 3 Apr 2015\r1. [5pm] task 2\r2. [6pm] task1\r\r";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'editCase1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class editCase1Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'clear' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText = "clear";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'add task1[sun 10 - 14' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText1 = "add task1[sun 10 - 14";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'add task2[6/4/2015 19' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText2 = "add task2[6/4/2015 19";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type 'edit 1 task1-have dinner with ann[sun 19 -22' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText3 = "edit 1 task1-have dinner with ann[sun 19 -22";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys3 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertEditCase1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertEditCase1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'allTaskBox' text box equals 'Sunday, 5 Apr 2015        ///1. [7pm] task1-have dinner with ann        ///Monday, 6 Apr 2015        ///2. [7pm] task2        ///        ///'
        /// </summary>
        public string UIAllTaskBoxEditText = "Sunday, 5 Apr 2015\r1. [7pm] task1-have dinner with ann\rMonday, 6 Apr 2015\r2. [7pm" +
            "] task2\r\r";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'undoCase1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class undoCase1Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'clear' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText = "clear";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'add task1[sun 19' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText1 = "add task1[sun 19";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'add task2[5/4/2015 19' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText2 = "add task2[5/4/2015 19";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type 'undo' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText3 = "undo";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys3 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertUndoCase1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertUndoCase1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'allTaskBox' text box equals 'Sunday, 5 Apr 2015        ///1. [7pm] task1        ///        ///'
        /// </summary>
        public string UIAllTaskBoxEditText = "Sunday, 5 Apr 2015\r1. [7pm] task1\r\r";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'undoCase2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class undoCase2Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'clear' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText = "clear";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'add task1[fri 5 - 6' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText1 = "add task1[fri 5 - 6";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'add task2[5/4/2015 16' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText2 = "add task2[5/4/2015 16";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type 'add task3[sat 19 - 22' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText3 = "add task3[sat 19 - 22";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type 'edit 2 task3[sat 19 - 23' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText4 = "edit 2 task3[sat 19 - 23";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys4 = "{Enter}";
        
        /// <summary>
        /// Type 'add task4[15/4/2015 11 - 12' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText5 = "add task4[15/4/2015 11 - 12";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys5 = "{Enter}";
        
        /// <summary>
        /// Type 'undo' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys6 = "undo";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys7 = "{Enter}";
        
        /// <summary>
        /// Type 'undo{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys8 = "undo{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertUndoCase2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertUndoCase2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'allTaskBox' text box equals 'Friday, 3 Apr 2015        ///1. [5-6] task1        ///Saturday, 4 Apr 2015        ///2. [7-10pm] task3        ///Sunday, 5 Apr 2015        ///3. [4pm] task2        ///        ///'
        /// </summary>
        public string UIAllTaskBoxEditText = "Friday, 3 Apr 2015\r1. [5-6] task1\rSaturday, 4 Apr 2015\r2. [7-10pm] task3\rSunday, " +
            "5 Apr 2015\r3. [4pm] task2\r\r";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIMagicMemoGUIWindow : WinWindow
    {
        
        public UIMagicMemoGUIWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "MagicMemoGUI";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MagicMemoGUI");
            #endregion
        }
        
        #region Properties
        public UICommandInputBoxWindow UICommandInputBoxWindow
        {
            get
            {
                if ((this.mUICommandInputBoxWindow == null))
                {
                    this.mUICommandInputBoxWindow = new UICommandInputBoxWindow(this);
                }
                return this.mUICommandInputBoxWindow;
            }
        }
        
        public UICommandInputBoxWindow1 UICommandInputBoxWindow1
        {
            get
            {
                if ((this.mUICommandInputBoxWindow1 == null))
                {
                    this.mUICommandInputBoxWindow1 = new UICommandInputBoxWindow1(this);
                }
                return this.mUICommandInputBoxWindow1;
            }
        }
        
        public UICommandInputBoxWindow2 UICommandInputBoxWindow2
        {
            get
            {
                if ((this.mUICommandInputBoxWindow2 == null))
                {
                    this.mUICommandInputBoxWindow2 = new UICommandInputBoxWindow2(this);
                }
                return this.mUICommandInputBoxWindow2;
            }
        }
        
        public UICommandInputBoxWindow3 UICommandInputBoxWindow3
        {
            get
            {
                if ((this.mUICommandInputBoxWindow3 == null))
                {
                    this.mUICommandInputBoxWindow3 = new UICommandInputBoxWindow3(this);
                }
                return this.mUICommandInputBoxWindow3;
            }
        }
        
        public UICommandInputBoxWindow4 UICommandInputBoxWindow4
        {
            get
            {
                if ((this.mUICommandInputBoxWindow4 == null))
                {
                    this.mUICommandInputBoxWindow4 = new UICommandInputBoxWindow4(this);
                }
                return this.mUICommandInputBoxWindow4;
            }
        }
        
        public UIAllTaskBoxWindow UIAllTaskBoxWindow
        {
            get
            {
                if ((this.mUIAllTaskBoxWindow == null))
                {
                    this.mUIAllTaskBoxWindow = new UIAllTaskBoxWindow(this);
                }
                return this.mUIAllTaskBoxWindow;
            }
        }
        
        public UICommandInputBoxWindow5 UICommandInputBoxWindow5
        {
            get
            {
                if ((this.mUICommandInputBoxWindow5 == null))
                {
                    this.mUICommandInputBoxWindow5 = new UICommandInputBoxWindow5(this);
                }
                return this.mUICommandInputBoxWindow5;
            }
        }
        
        public UICommandInputBoxWindow6 UICommandInputBoxWindow6
        {
            get
            {
                if ((this.mUICommandInputBoxWindow6 == null))
                {
                    this.mUICommandInputBoxWindow6 = new UICommandInputBoxWindow6(this);
                }
                return this.mUICommandInputBoxWindow6;
            }
        }
        
        public UICommandInputBoxWindow7 UICommandInputBoxWindow7
        {
            get
            {
                if ((this.mUICommandInputBoxWindow7 == null))
                {
                    this.mUICommandInputBoxWindow7 = new UICommandInputBoxWindow7(this);
                }
                return this.mUICommandInputBoxWindow7;
            }
        }
        #endregion
        
        #region Fields
        private UICommandInputBoxWindow mUICommandInputBoxWindow;
        
        private UICommandInputBoxWindow1 mUICommandInputBoxWindow1;
        
        private UICommandInputBoxWindow2 mUICommandInputBoxWindow2;
        
        private UICommandInputBoxWindow3 mUICommandInputBoxWindow3;
        
        private UICommandInputBoxWindow4 mUICommandInputBoxWindow4;
        
        private UIAllTaskBoxWindow mUIAllTaskBoxWindow;
        
        private UICommandInputBoxWindow5 mUICommandInputBoxWindow5;
        
        private UICommandInputBoxWindow6 mUICommandInputBoxWindow6;
        
        private UICommandInputBoxWindow7 mUICommandInputBoxWindow7;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow : WinWindow
    {
        
        public UICommandInputBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("MagicMemoGUI");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Today\'s Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("MagicMemoGUI");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow1 : WinWindow
    {
        
        public UICommandInputBoxWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("MagicMemoGUI");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Today\'s Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("MagicMemoGUI");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow2 : WinWindow
    {
        
        public UICommandInputBoxWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("MagicMemoGUI");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Today\'s Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("MagicMemoGUI");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow3 : WinWindow
    {
        
        public UICommandInputBoxWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("MagicMemoGUI");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Today\'s Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("MagicMemoGUI");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow4 : WinWindow
    {
        
        public UICommandInputBoxWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("MagicMemoGUI");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Today\'s Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("MagicMemoGUI");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIAllTaskBoxWindow : WinWindow
    {
        
        public UIAllTaskBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "allTaskBox";
            this.WindowTitles.Add("MagicMemoGUI");
            #endregion
        }
        
        #region Properties
        public WinEdit UIAllTaskBoxEdit
        {
            get
            {
                if ((this.mUIAllTaskBoxEdit == null))
                {
                    this.mUIAllTaskBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIAllTaskBoxEdit.WindowTitles.Add("MagicMemoGUI");
                    #endregion
                }
                return this.mUIAllTaskBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIAllTaskBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow5 : WinWindow
    {
        
        public UICommandInputBoxWindow5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("MagicMemoGUI");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Today\'s Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("MagicMemoGUI");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow6 : WinWindow
    {
        
        public UICommandInputBoxWindow6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("MagicMemoGUI");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Today\'s Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("MagicMemoGUI");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow7 : WinWindow
    {
        
        public UICommandInputBoxWindow7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("MagicMemoGUI");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Today\'s Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("MagicMemoGUI");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
}
