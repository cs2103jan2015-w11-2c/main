// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace GUI_Test
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// add task with exact date or weekday(next,this) or no date
        /// </summary>
        public void addCase1()
        {
            #region Variable Declarations
            WinEdit uICommandInputBoxEdit = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit1 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow1.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit2 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow2.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit3 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow3.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit4 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow4.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit5 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow5.UICommandInputBoxEdit;
            #endregion

            // Type 'clear' in 'commandInputBox' text box
            uICommandInputBoxEdit.Text = this.addCase1Params.UICommandInputBoxEditText;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit, this.addCase1Params.UICommandInputBoxEditSendKeys, ModifierKeys.None);

            // The control for this action was not recorded.

            // Type 'add task1 on mon 19' in 'commandInputBox' text box
            uICommandInputBoxEdit1.Text = this.addCase1Params.UICommandInputBoxEditText1;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit1, this.addCase1Params.UICommandInputBoxEditSendKeys1, ModifierKeys.None);

            // Type 'add task2 on 5/5/2015 14 - 16' in 'commandInputBox' text box
            uICommandInputBoxEdit2.Text = this.addCase1Params.UICommandInputBoxEditText2;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit2, this.addCase1Params.UICommandInputBoxEditSendKeys2, ModifierKeys.None);

            // Type 'add task3 on next sunday 18 - 19' in 'commandInputBox' text box
            uICommandInputBoxEdit3.Text = this.addCase1Params.UICommandInputBoxEditText3;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit3, this.addCase1Params.UICommandInputBoxEditSendKeys3, ModifierKeys.None);

            // Type 'add task4 ' in 'commandInputBox' text box
            uICommandInputBoxEdit4.Text = this.addCase1Params.UICommandInputBoxEditText4;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit4, this.addCase1Params.UICommandInputBoxEditSendKeys4, ModifierKeys.None);

            // Type '' in 'commandInputBox' text box
            uICommandInputBoxEdit5.Text = this.addCase1Params.UICommandInputBoxEditText5;
        }
        
        /// <summary>
        /// AssertAddCase1 - Use 'AssertAddCase1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertAddCase1()
        {
            #region Variable Declarations
            WinEdit uIAllTaskBoxEdit = this.UIMagicMemoGUIWindow.UIAllTaskBoxWindow.UIAllTaskBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'allTaskBox' text box equals 'Floating            //1.  task4            //Sunday, 12 Apr 2015            //3. [6p-7p] task3            //Tuesday, 5 May 2015            //4. [2p-4p] task2            //            //'
            Assert.AreEqual(this.AssertAddCase1ExpectedValues.UIAllTaskBoxEditText, uIAllTaskBoxEdit.Text);
        }
        
        /// <summary>
        /// AssertDeleteCase1 - Use 'AssertDeleteCase1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertDeleteCase1()
        {
            #region Variable Declarations
            WinEdit uIAllTaskBoxEdit = this.UIMagicMemoGUIWindow.UIAllTaskBoxWindow.UIAllTaskBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'allTaskBox' text box equals 'Friday, 3 Apr 2015            //1. [7-10] task4            //Tuesday, 7 Apr 2015            //2. [11-2p] task2            //            //'
            Assert.AreEqual(this.AssertDeleteCase1ExpectedValues.UIAllTaskBoxEditText, uIAllTaskBoxEdit.Text);
        }
        
        /// <summary>
        /// AssertEditCase1 - Use 'AssertEditCase1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertEditCase1()
        {
            #region Variable Declarations
            WinEdit uIAllTaskBoxEdit = this.UIMagicMemoGUIWindow.UIAllTaskBoxWindow.UIAllTaskBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'allTaskBox' text box equals 'Tuesday, 7 Apr 2015            //1. [6p-7p] task1            //Thursday, 9 Apr 2015            //2. [11-3p] task4            //Friday, 10 Apr 2015            //3. [10-1p] task2            //            //'
            Assert.AreEqual(this.AssertEditCase1ExpectedValues.UIAllTaskBoxEditText, uIAllTaskBoxEdit.Text);
        }
        
        /// <summary>
        /// AssertRedoCase1 - Use 'AssertRedoCase1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertRedoCase1()
        {
            #region Variable Declarations
            WinEdit uIAllTaskBoxEdit = this.UIMagicMemoGUIWindow.UIAllTaskBoxWindow.UIAllTaskBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'allTaskBox' text box equals 'Friday, 3 Apr 2015            //1. [6-10] task1            //Friday, 10 Apr 2015            //2. [6-10] task2            //            //'
            Assert.AreEqual(this.AssertRedoCase1ExpectedValues.UIAllTaskBoxEditText, uIAllTaskBoxEdit.Text);
        }
        
        /// <summary>
        /// AssertRedoCase2 - Use 'AssertRedoCase2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertRedoCase2()
        {
            #region Variable Declarations
            WinEdit uIAllTaskBoxEdit = this.UIMagicMemoGUIWindow.UIAllTaskBoxWindow.UIAllTaskBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'allTaskBox' text box equals 'Saturday, 4 Apr 2015            //1. [5p-7p] task1            //Friday, 10 Apr 2015            //2. [2p-3p] task2            //            //'
            Assert.AreEqual(this.AssertRedoCase2ExpectedValues.UIAllTaskBoxEditText, uIAllTaskBoxEdit.Text);
        }
        
        /// <summary>
        /// AssertUndoCase1 - Use 'AssertUndoCase1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertUndoCase1()
        {
            #region Variable Declarations
            WinEdit uIAllTaskBoxEdit = this.UIMagicMemoGUIWindow.UIAllTaskBoxWindow.UIAllTaskBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'allTaskBox' text box equals '            //'
            Assert.AreEqual(this.AssertUndoCase1ExpectedValues.UIAllTaskBoxEditText, uIAllTaskBoxEdit.Text);
        }
        
        /// <summary>
        /// AssertUndoCase2 - Use 'AssertUndoCase2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertUndoCase2()
        {
            #region Variable Declarations
            WinEdit uIAllTaskBoxEdit = this.UIMagicMemoGUIWindow.UIAllTaskBoxWindow.UIAllTaskBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'allTaskBox' text box equals 'Friday, 3 Apr 2015            //1. [11] task2            //Sunday, 5 Apr 2015            //2. [10-12p] task3            //Tuesday, 7 Apr 2015            //3. [7p-8p] task1            //            //'
            Assert.AreEqual(this.AssertUndoCase2ExpectedValues.UIAllTaskBoxEditText, uIAllTaskBoxEdit.Text);
        }
        
        /// <summary>
        /// add 4 tasks and delete 1 and 3
        /// </summary>
        public void deleteCase1()
        {
            #region Variable Declarations
            WinEdit uICommandInputBoxEdit = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit1 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow1.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit2 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow2.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit3 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow3.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit4 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow4.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit5 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow5.UICommandInputBoxEdit;
            #endregion

            // Type 'clear' in 'commandInputBox' text box
            uICommandInputBoxEdit.Text = this.deleteCase1Params.UICommandInputBoxEditText;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit, this.deleteCase1Params.UICommandInputBoxEditSendKeys, ModifierKeys.None);

            // Type 'add task1 on next mon 9' in 'commandInputBox' text box
            uICommandInputBoxEdit1.Text = this.deleteCase1Params.UICommandInputBoxEditText1;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit1, this.deleteCase1Params.UICommandInputBoxEditSendKeys1, ModifierKeys.None);

            // Type 'add task2 on 7/4 11 - 14' in 'commandInputBox' text box
            uICommandInputBoxEdit2.Text = this.deleteCase1Params.UICommandInputBoxEditText2;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit2, this.deleteCase1Params.UICommandInputBoxEditSendKeys2, ModifierKeys.None);

            // Type 'add task3 on friday 15 ' in 'commandInputBox' text box
            uICommandInputBoxEdit3.Text = this.deleteCase1Params.UICommandInputBoxEditText3;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit3, this.deleteCase1Params.UICommandInputBoxEditSendKeys3, ModifierKeys.None);

            // Type 'add task4 on friday 7 - 10' in 'commandInputBox' text box
            uICommandInputBoxEdit4.Text = this.deleteCase1Params.UICommandInputBoxEditText4;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit4, this.deleteCase1Params.UICommandInputBoxEditSendKeys4, ModifierKeys.None);

            // Type 'delete 1 3' in 'commandInputBox' text box
            uICommandInputBoxEdit5.Text = this.deleteCase1Params.UICommandInputBoxEditText5;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit5, this.deleteCase1Params.UICommandInputBoxEditSendKeys5, ModifierKeys.None);
        }
        
        /// <summary>
        /// add 3 tasks and edit task no.2 to change its date and time
        /// </summary>
        public void editCase1()
        {
            #region Variable Declarations
            WinEdit uICommandInputBoxEdit = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit1 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow1.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit2 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow2.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit3 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow3.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit4 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow4.UICommandInputBoxEdit;
            #endregion

            // Type 'clear' in 'commandInputBox' text box
            uICommandInputBoxEdit.Text = this.editCase1Params.UICommandInputBoxEditText;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit, this.editCase1Params.UICommandInputBoxEditSendKeys, ModifierKeys.None);

            // Type 'add task1 on 7/4 18 - 19' in 'commandInputBox' text box
            uICommandInputBoxEdit1.Text = this.editCase1Params.UICommandInputBoxEditText1;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit1, this.editCase1Params.UICommandInputBoxEditSendKeys1, ModifierKeys.None);

            // Type 'add task2 on next friday 10 - 13' in 'commandInputBox' text box
            uICommandInputBoxEdit2.Text = this.editCase1Params.UICommandInputBoxEditText2;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit2, this.editCase1Params.UICommandInputBoxEditSendKeys2, ModifierKeys.None);

            // Type 'add task4 on 8/4 10' in 'commandInputBox' text box
            uICommandInputBoxEdit3.Text = this.editCase1Params.UICommandInputBoxEditText3;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit3, this.editCase1Params.UICommandInputBoxEditSendKeys3, ModifierKeys.None);

            // Type 'edit 2 task4 on 9/4 11 - 15' in 'commandInputBox' text box
            uICommandInputBoxEdit4.Text = this.editCase1Params.UICommandInputBoxEditText4;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit4, this.editCase1Params.UICommandInputBoxEditSendKeys4, ModifierKeys.None);
        }
        
        /// <summary>
        /// add two clash tasks, undo later one then redo.Then edit the later one to resolve clash
        /// </summary>
        public void redoCase1()
        {
            #region Variable Declarations
            WinEdit uICommandInputBoxEdit = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit1 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow1.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit2 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow2.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit3 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow3.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit4 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow4.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit5 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow5.UICommandInputBoxEdit;
            #endregion

            // Type 'clear' in 'commandInputBox' text box
            uICommandInputBoxEdit.Text = this.redoCase1Params.UICommandInputBoxEditText;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit, this.redoCase1Params.UICommandInputBoxEditSendKeys, ModifierKeys.None);

            // Type 'add task1 on friday 6 - 10' in 'commandInputBox' text box
            uICommandInputBoxEdit1.Text = this.redoCase1Params.UICommandInputBoxEditText1;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit1, this.redoCase1Params.UICommandInputBoxEditSendKeys1, ModifierKeys.None);

            // Type 'add task2 on 3/4 6 - 10' in 'commandInputBox' text box
            uICommandInputBoxEdit2.Text = this.redoCase1Params.UICommandInputBoxEditText2;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit2, this.redoCase1Params.UICommandInputBoxEditSendKeys2, ModifierKeys.None);

            // Type 'undo ' in 'commandInputBox' text box
            uICommandInputBoxEdit3.Text = this.redoCase1Params.UICommandInputBoxEditText3;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit3, this.redoCase1Params.UICommandInputBoxEditSendKeys3, ModifierKeys.None);

            // Type 'redo' in 'commandInputBox' text box
            uICommandInputBoxEdit4.Text = this.redoCase1Params.UICommandInputBoxEditText4;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit4, this.redoCase1Params.UICommandInputBoxEditSendKeys4, ModifierKeys.None);

            // Type 'edit 2 task2 on next friday 6 - 10' in 'commandInputBox' text box
            uICommandInputBoxEdit5.Text = this.redoCase1Params.UICommandInputBoxEditText5;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit5, this.redoCase1Params.UICommandInputBoxEditSendKeys5, ModifierKeys.None);
        }
        
        /// <summary>
        /// redoCase2 - Use 'redoCase2Params' to pass parameters into this method.
        /// </summary>
        public void redoCase2()
        {
            #region Variable Declarations
            WinEdit uICommandInputBoxEdit = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit1 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow1.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit2 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow2.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit3 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow3.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit4 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow4.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit5 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow5.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit6 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow6.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit7 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow7.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit8 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow8.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit9 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow9.UICommandInputBoxEdit;
            #endregion

            // Type 'clear' in 'commandInputBox' text box
            uICommandInputBoxEdit.Text = this.redoCase2Params.UICommandInputBoxEditText;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit, this.redoCase2Params.UICommandInputBoxEditSendKeys, ModifierKeys.None);

            // Type 'add task1 on fri 17' in 'commandInputBox' text box
            uICommandInputBoxEdit1.Text = this.redoCase2Params.UICommandInputBoxEditText1;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit1, this.redoCase2Params.UICommandInputBoxEditSendKeys1, ModifierKeys.None);

            // Type 'add task2 on next fri 14 - 15' in 'commandInputBox' text box
            uICommandInputBoxEdit2.Text = this.redoCase2Params.UICommandInputBoxEditText2;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit2, this.redoCase2Params.UICommandInputBoxEditSendKeys2, ModifierKeys.None);

            // Type 'add task3 on 9/4 10 ' in 'commandInputBox' text box
            uICommandInputBoxEdit3.Text = this.redoCase2Params.UICommandInputBoxEditText3;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit3, this.redoCase2Params.UICommandInputBoxEditSendKeys3, ModifierKeys.None);

            // Type 'delete 2' in 'commandInputBox' text box
            uICommandInputBoxEdit4.Text = this.redoCase2Params.UICommandInputBoxEditText4;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit4, this.redoCase2Params.UICommandInputBoxEditSendKeys4, ModifierKeys.None);

            // Type 'edit 1 task1 on saturday 17 - 19' in 'commandInputBox' text box
            uICommandInputBoxEdit5.Text = this.redoCase2Params.UICommandInputBoxEditText5;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit5, this.redoCase2Params.UICommandInputBoxEditSendKeys5, ModifierKeys.None);

            // Type 'undo' in 'commandInputBox' text box
            uICommandInputBoxEdit6.Text = this.redoCase2Params.UICommandInputBoxEditText6;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit6, this.redoCase2Params.UICommandInputBoxEditSendKeys6, ModifierKeys.None);

            // Type 'undo' in 'commandInputBox' text box
            uICommandInputBoxEdit7.Text = this.redoCase2Params.UICommandInputBoxEditText7;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit7, this.redoCase2Params.UICommandInputBoxEditSendKeys7, ModifierKeys.None);

            // Type 'redo{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit8, this.redoCase2Params.UICommandInputBoxEditSendKeys8, ModifierKeys.None);

            // Type 'redo{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit9, this.redoCase2Params.UICommandInputBoxEditSendKeys9, ModifierKeys.None);
        }
        
        /// <summary>
        /// add one case wrong and undo
        /// </summary>
        public void undoCase1()
        {
            #region Variable Declarations
            WinEdit uICommandInputBoxEdit = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit1 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow1.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit2 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow2.UICommandInputBoxEdit;
            #endregion

            // Type 'clear' in 'commandInputBox' text box
            uICommandInputBoxEdit.Text = this.undoCase1Params.UICommandInputBoxEditText;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit, this.undoCase1Params.UICommandInputBoxEditSendKeys, ModifierKeys.None);

            // Type 'add task1 on 6/4 0' in 'commandInputBox' text box
            uICommandInputBoxEdit1.Text = this.undoCase1Params.UICommandInputBoxEditText1;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit1, this.undoCase1Params.UICommandInputBoxEditSendKeys1, ModifierKeys.None);

            // Type 'undo' in 'commandInputBox' text box
            uICommandInputBoxEdit2.Text = this.undoCase1Params.UICommandInputBoxEditText2;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit2, this.undoCase1Params.UICommandInputBoxEditSendKeys2, ModifierKeys.None);
        }
        
        /// <summary>
        /// undoCase2 - Use 'undoCase2Params' to pass parameters into this method.
        /// </summary>
        public void undoCase2()
        {
            #region Variable Declarations
            WinEdit uICommandInputBoxEdit = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit1 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow1.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit2 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow2.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit3 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow3.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit4 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow4.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit5 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow5.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit6 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow6.UICommandInputBoxEdit;
            WinEdit uICommandInputBoxEdit7 = this.UIMagicMemoGUIWindow.UICommandInputBoxWindow7.UICommandInputBoxEdit;
            #endregion

            // Type 'clear' in 'commandInputBox' text box
            uICommandInputBoxEdit.Text = this.undoCase2Params.UICommandInputBoxEditText;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit, this.undoCase2Params.UICommandInputBoxEditSendKeys, ModifierKeys.None);

            // Type 'add task1 on 7/4 19 - 20' in 'commandInputBox' text box
            uICommandInputBoxEdit1.Text = this.undoCase2Params.UICommandInputBoxEditText1;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit1, this.undoCase2Params.UICommandInputBoxEditSendKeys1, ModifierKeys.None);

            // Type 'add task2 on fri 11 ' in 'commandInputBox' text box
            uICommandInputBoxEdit2.Text = this.undoCase2Params.UICommandInputBoxEditText2;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit2, this.undoCase2Params.UICommandInputBoxEditSendKeys2, ModifierKeys.None);

            // Type 'add task3 on sun 10 - 12' in 'commandInputBox' text box
            uICommandInputBoxEdit3.Text = this.undoCase2Params.UICommandInputBoxEditText3;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit3, this.undoCase2Params.UICommandInputBoxEditSendKeys3, ModifierKeys.None);

            // Type 'edit 2 task3 on next sunday 10 - 12' in 'commandInputBox' text box
            uICommandInputBoxEdit4.Text = this.undoCase2Params.UICommandInputBoxEditText4;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit4, this.undoCase2Params.UICommandInputBoxEditSendKeys4, ModifierKeys.None);

            // Type 'add task4 on 19/5/2015 18 - 19' in 'commandInputBox' text box
            uICommandInputBoxEdit5.Text = this.undoCase2Params.UICommandInputBoxEditText5;

            // Type '{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit5, this.undoCase2Params.UICommandInputBoxEditSendKeys5, ModifierKeys.None);

            // Type 'undo{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit6, this.undoCase2Params.UICommandInputBoxEditSendKeys6, ModifierKeys.None);

            // Type 'undo{Enter}' in 'commandInputBox' text box
            Keyboard.SendKeys(uICommandInputBoxEdit7, this.undoCase2Params.UICommandInputBoxEditSendKeys7, ModifierKeys.None);
        }
        
        #region Properties
        public virtual addCase1Params addCase1Params
        {
            get
            {
                if ((this.maddCase1Params == null))
                {
                    this.maddCase1Params = new addCase1Params();
                }
                return this.maddCase1Params;
            }
        }
        
        public virtual AssertAddCase1ExpectedValues AssertAddCase1ExpectedValues
        {
            get
            {
                if ((this.mAssertAddCase1ExpectedValues == null))
                {
                    this.mAssertAddCase1ExpectedValues = new AssertAddCase1ExpectedValues();
                }
                return this.mAssertAddCase1ExpectedValues;
            }
        }
        
        public virtual AssertDeleteCase1ExpectedValues AssertDeleteCase1ExpectedValues
        {
            get
            {
                if ((this.mAssertDeleteCase1ExpectedValues == null))
                {
                    this.mAssertDeleteCase1ExpectedValues = new AssertDeleteCase1ExpectedValues();
                }
                return this.mAssertDeleteCase1ExpectedValues;
            }
        }
        
        public virtual AssertEditCase1ExpectedValues AssertEditCase1ExpectedValues
        {
            get
            {
                if ((this.mAssertEditCase1ExpectedValues == null))
                {
                    this.mAssertEditCase1ExpectedValues = new AssertEditCase1ExpectedValues();
                }
                return this.mAssertEditCase1ExpectedValues;
            }
        }
        
        public virtual AssertRedoCase1ExpectedValues AssertRedoCase1ExpectedValues
        {
            get
            {
                if ((this.mAssertRedoCase1ExpectedValues == null))
                {
                    this.mAssertRedoCase1ExpectedValues = new AssertRedoCase1ExpectedValues();
                }
                return this.mAssertRedoCase1ExpectedValues;
            }
        }
        
        public virtual AssertRedoCase2ExpectedValues AssertRedoCase2ExpectedValues
        {
            get
            {
                if ((this.mAssertRedoCase2ExpectedValues == null))
                {
                    this.mAssertRedoCase2ExpectedValues = new AssertRedoCase2ExpectedValues();
                }
                return this.mAssertRedoCase2ExpectedValues;
            }
        }
        
        public virtual AssertUndoCase1ExpectedValues AssertUndoCase1ExpectedValues
        {
            get
            {
                if ((this.mAssertUndoCase1ExpectedValues == null))
                {
                    this.mAssertUndoCase1ExpectedValues = new AssertUndoCase1ExpectedValues();
                }
                return this.mAssertUndoCase1ExpectedValues;
            }
        }
        
        public virtual AssertUndoCase2ExpectedValues AssertUndoCase2ExpectedValues
        {
            get
            {
                if ((this.mAssertUndoCase2ExpectedValues == null))
                {
                    this.mAssertUndoCase2ExpectedValues = new AssertUndoCase2ExpectedValues();
                }
                return this.mAssertUndoCase2ExpectedValues;
            }
        }
        
        public virtual deleteCase1Params deleteCase1Params
        {
            get
            {
                if ((this.mdeleteCase1Params == null))
                {
                    this.mdeleteCase1Params = new deleteCase1Params();
                }
                return this.mdeleteCase1Params;
            }
        }
        
        public virtual editCase1Params editCase1Params
        {
            get
            {
                if ((this.meditCase1Params == null))
                {
                    this.meditCase1Params = new editCase1Params();
                }
                return this.meditCase1Params;
            }
        }
        
        public virtual redoCase1Params redoCase1Params
        {
            get
            {
                if ((this.mredoCase1Params == null))
                {
                    this.mredoCase1Params = new redoCase1Params();
                }
                return this.mredoCase1Params;
            }
        }
        
        public virtual redoCase2Params redoCase2Params
        {
            get
            {
                if ((this.mredoCase2Params == null))
                {
                    this.mredoCase2Params = new redoCase2Params();
                }
                return this.mredoCase2Params;
            }
        }
        
        public virtual undoCase1Params undoCase1Params
        {
            get
            {
                if ((this.mundoCase1Params == null))
                {
                    this.mundoCase1Params = new undoCase1Params();
                }
                return this.mundoCase1Params;
            }
        }
        
        public virtual undoCase2Params undoCase2Params
        {
            get
            {
                if ((this.mundoCase2Params == null))
                {
                    this.mundoCase2Params = new undoCase2Params();
                }
                return this.mundoCase2Params;
            }
        }
        
        public UIMagicMemoGUIWindow UIMagicMemoGUIWindow
        {
            get
            {
                if ((this.mUIMagicMemoGUIWindow == null))
                {
                    this.mUIMagicMemoGUIWindow = new UIMagicMemoGUIWindow();
                }
                return this.mUIMagicMemoGUIWindow;
            }
        }
        #endregion
        
        #region Fields
        private addCase1Params maddCase1Params;
        
        private AssertAddCase1ExpectedValues mAssertAddCase1ExpectedValues;
        
        private AssertDeleteCase1ExpectedValues mAssertDeleteCase1ExpectedValues;
        
        private AssertEditCase1ExpectedValues mAssertEditCase1ExpectedValues;
        
        private AssertRedoCase1ExpectedValues mAssertRedoCase1ExpectedValues;
        
        private AssertRedoCase2ExpectedValues mAssertRedoCase2ExpectedValues;
        
        private AssertUndoCase1ExpectedValues mAssertUndoCase1ExpectedValues;
        
        private AssertUndoCase2ExpectedValues mAssertUndoCase2ExpectedValues;
        
        private deleteCase1Params mdeleteCase1Params;
        
        private editCase1Params meditCase1Params;
        
        private redoCase1Params mredoCase1Params;
        
        private redoCase2Params mredoCase2Params;
        
        private undoCase1Params mundoCase1Params;
        
        private undoCase2Params mundoCase2Params;
        
        private UIMagicMemoGUIWindow mUIMagicMemoGUIWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'addCase1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class addCase1Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'clear' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText = "clear";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'add task1 on mon 19' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText1 = "add task1 on mon 19";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'add task2 on 5/5/2015 14 - 16' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText2 = "add task2 on 5/5/2015 14 - 16";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type 'add task3 on next sunday 18 - 19' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText3 = "add task3 on next sunday 18 - 19";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type 'add task4 ' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText4 = "add task4 ";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys4 = "{Enter}";
        
        /// <summary>
        /// Type '' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText5 = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertAddCase1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertAddCase1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'allTaskBox' text box equals 'Floating        ///1.  task4        ///Sunday, 12 Apr 2015        ///3. [6p-7p] task3        ///Tuesday, 5 May 2015        ///4. [2p-4p] task2        ///        ///'
        /// </summary>
        public string UIAllTaskBoxEditText = "Floating\r1.  task4\rSunday, 12 Apr 2015\r3. [6p-7p] task3\rTuesday, 5 May 2015\r4. [2" +
            "p-4p] task2\r\r";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertDeleteCase1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertDeleteCase1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'allTaskBox' text box equals 'Friday, 3 Apr 2015        ///1. [7-10] task4        ///Tuesday, 7 Apr 2015        ///2. [11-2p] task2        ///        ///'
        /// </summary>
        public string UIAllTaskBoxEditText = "Friday, 3 Apr 2015\r1. [7-10] task4\rTuesday, 7 Apr 2015\r2. [11-2p] task2\r\r";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertEditCase1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertEditCase1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'allTaskBox' text box equals 'Tuesday, 7 Apr 2015        ///1. [6p-7p] task1        ///Thursday, 9 Apr 2015        ///2. [11-3p] task4        ///Friday, 10 Apr 2015        ///3. [10-1p] task2        ///        ///'
        /// </summary>
        public string UIAllTaskBoxEditText = "Tuesday, 7 Apr 2015\r1. [6p-7p] task1\rThursday, 9 Apr 2015\r2. [11-3p] task4\rFriday" +
            ", 10 Apr 2015\r3. [10-1p] task2\r\r";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertRedoCase1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertRedoCase1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'allTaskBox' text box equals 'Friday, 3 Apr 2015        ///1. [6-10] task1        ///Friday, 10 Apr 2015        ///2. [6-10] task2        ///        ///'
        /// </summary>
        public string UIAllTaskBoxEditText = "Friday, 3 Apr 2015\r1. [6-10] task1\rFriday, 10 Apr 2015\r2. [6-10] task2\r\r";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertRedoCase2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertRedoCase2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'allTaskBox' text box equals 'Saturday, 4 Apr 2015        ///1. [5p-7p] task1        ///Friday, 10 Apr 2015        ///2. [2p-3p] task2        ///        ///'
        /// </summary>
        public string UIAllTaskBoxEditText = "Saturday, 4 Apr 2015\r1. [5p-7p] task1\rFriday, 10 Apr 2015\r2. [2p-3p] task2\r\r";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertUndoCase1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertUndoCase1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'allTaskBox' text box equals '        ///'
        /// </summary>
        public string UIAllTaskBoxEditText = "\r";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertUndoCase2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertUndoCase2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'allTaskBox' text box equals 'Friday, 3 Apr 2015        ///1. [11] task2        ///Sunday, 5 Apr 2015        ///2. [10-12p] task3        ///Tuesday, 7 Apr 2015        ///3. [7p-8p] task1        ///        ///'
        /// </summary>
        public string UIAllTaskBoxEditText = "Friday, 3 Apr 2015\r1. [11] task2\rSunday, 5 Apr 2015\r2. [10-12p] task3\rTuesday, 7 " +
            "Apr 2015\r3. [7p-8p] task1\r\r";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'deleteCase1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class deleteCase1Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'clear' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText = "clear";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'add task1 on next mon 9' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText1 = "add task1 on next mon 9";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'add task2 on 7/4 11 - 14' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText2 = "add task2 on 7/4 11 - 14";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type 'add task3 on friday 15 ' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText3 = "add task3 on friday 15 ";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type 'add task4 on friday 7 - 10' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText4 = "add task4 on friday 7 - 10";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys4 = "{Enter}";
        
        /// <summary>
        /// Type 'delete 1 3' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText5 = "delete 1 3";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys5 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'editCase1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class editCase1Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'clear' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText = "clear";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'add task1 on 7/4 18 - 19' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText1 = "add task1 on 7/4 18 - 19";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'add task2 on next friday 10 - 13' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText2 = "add task2 on next friday 10 - 13";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type 'add task4 on 8/4 10' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText3 = "add task4 on 8/4 10";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type 'edit 2 task4 on 9/4 11 - 15' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText4 = "edit 2 task4 on 9/4 11 - 15";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys4 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'redoCase1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class redoCase1Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'clear' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText = "clear";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'add task1 on friday 6 - 10' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText1 = "add task1 on friday 6 - 10";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'add task2 on 3/4 6 - 10' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText2 = "add task2 on 3/4 6 - 10";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type 'undo ' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText3 = "undo ";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type 'redo' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText4 = "redo";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys4 = "{Enter}";
        
        /// <summary>
        /// Type 'edit 2 task2 on next friday 6 - 10' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText5 = "edit 2 task2 on next friday 6 - 10";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys5 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'redoCase2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class redoCase2Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'clear' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText = "clear";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'add task1 on fri 17' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText1 = "add task1 on fri 17";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'add task2 on next fri 14 - 15' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText2 = "add task2 on next fri 14 - 15";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type 'add task3 on 9/4 10 ' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText3 = "add task3 on 9/4 10 ";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type 'delete 2' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText4 = "delete 2";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys4 = "{Enter}";
        
        /// <summary>
        /// Type 'edit 1 task1 on saturday 17 - 19' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText5 = "edit 1 task1 on saturday 17 - 19";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys5 = "{Enter}";
        
        /// <summary>
        /// Type 'undo' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText6 = "undo";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys6 = "{Enter}";
        
        /// <summary>
        /// Type 'undo' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText7 = "undo";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys7 = "{Enter}";
        
        /// <summary>
        /// Type 'redo{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys8 = "redo{Enter}";
        
        /// <summary>
        /// Type 'redo{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys9 = "redo{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'undoCase1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class undoCase1Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'clear' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText = "clear";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'add task1 on 6/4 0' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText1 = "add task1 on 6/4 0";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'undo' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText2 = "undo";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys2 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'undoCase2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class undoCase2Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'clear' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText = "clear";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'add task1 on 7/4 19 - 20' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText1 = "add task1 on 7/4 19 - 20";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'add task2 on fri 11 ' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText2 = "add task2 on fri 11 ";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type 'add task3 on sun 10 - 12' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText3 = "add task3 on sun 10 - 12";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type 'edit 2 task3 on next sunday 10 - 12' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText4 = "edit 2 task3 on next sunday 10 - 12";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys4 = "{Enter}";
        
        /// <summary>
        /// Type 'add task4 on 19/5/2015 18 - 19' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditText5 = "add task4 on 19/5/2015 18 - 19";
        
        /// <summary>
        /// Type '{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys5 = "{Enter}";
        
        /// <summary>
        /// Type 'undo{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys6 = "undo{Enter}";
        
        /// <summary>
        /// Type 'undo{Enter}' in 'commandInputBox' text box
        /// </summary>
        public string UICommandInputBoxEditSendKeys7 = "undo{Enter}";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIMagicMemoGUIWindow : WinWindow
    {
        
        public UIMagicMemoGUIWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "MagicMemoGUI";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MagicMemoGUI");
            #endregion
        }
        
        #region Properties
        public UICommandInputBoxWindow UICommandInputBoxWindow
        {
            get
            {
                if ((this.mUICommandInputBoxWindow == null))
                {
                    this.mUICommandInputBoxWindow = new UICommandInputBoxWindow(this);
                }
                return this.mUICommandInputBoxWindow;
            }
        }
        
        public UICommandInputBoxWindow1 UICommandInputBoxWindow1
        {
            get
            {
                if ((this.mUICommandInputBoxWindow1 == null))
                {
                    this.mUICommandInputBoxWindow1 = new UICommandInputBoxWindow1(this);
                }
                return this.mUICommandInputBoxWindow1;
            }
        }
        
        public UICommandInputBoxWindow2 UICommandInputBoxWindow2
        {
            get
            {
                if ((this.mUICommandInputBoxWindow2 == null))
                {
                    this.mUICommandInputBoxWindow2 = new UICommandInputBoxWindow2(this);
                }
                return this.mUICommandInputBoxWindow2;
            }
        }
        
        public UICommandInputBoxWindow3 UICommandInputBoxWindow3
        {
            get
            {
                if ((this.mUICommandInputBoxWindow3 == null))
                {
                    this.mUICommandInputBoxWindow3 = new UICommandInputBoxWindow3(this);
                }
                return this.mUICommandInputBoxWindow3;
            }
        }
        
        public UICommandInputBoxWindow4 UICommandInputBoxWindow4
        {
            get
            {
                if ((this.mUICommandInputBoxWindow4 == null))
                {
                    this.mUICommandInputBoxWindow4 = new UICommandInputBoxWindow4(this);
                }
                return this.mUICommandInputBoxWindow4;
            }
        }
        
        public UIAllTaskBoxWindow UIAllTaskBoxWindow
        {
            get
            {
                if ((this.mUIAllTaskBoxWindow == null))
                {
                    this.mUIAllTaskBoxWindow = new UIAllTaskBoxWindow(this);
                }
                return this.mUIAllTaskBoxWindow;
            }
        }
        
        public UICommandInputBoxWindow5 UICommandInputBoxWindow5
        {
            get
            {
                if ((this.mUICommandInputBoxWindow5 == null))
                {
                    this.mUICommandInputBoxWindow5 = new UICommandInputBoxWindow5(this);
                }
                return this.mUICommandInputBoxWindow5;
            }
        }
        
        public UICommandInputBoxWindow6 UICommandInputBoxWindow6
        {
            get
            {
                if ((this.mUICommandInputBoxWindow6 == null))
                {
                    this.mUICommandInputBoxWindow6 = new UICommandInputBoxWindow6(this);
                }
                return this.mUICommandInputBoxWindow6;
            }
        }
        
        public UICommandInputBoxWindow7 UICommandInputBoxWindow7
        {
            get
            {
                if ((this.mUICommandInputBoxWindow7 == null))
                {
                    this.mUICommandInputBoxWindow7 = new UICommandInputBoxWindow7(this);
                }
                return this.mUICommandInputBoxWindow7;
            }
        }
        
        public UICommandInputBoxWindow8 UICommandInputBoxWindow8
        {
            get
            {
                if ((this.mUICommandInputBoxWindow8 == null))
                {
                    this.mUICommandInputBoxWindow8 = new UICommandInputBoxWindow8(this);
                }
                return this.mUICommandInputBoxWindow8;
            }
        }
        
        public UICommandInputBoxWindow9 UICommandInputBoxWindow9
        {
            get
            {
                if ((this.mUICommandInputBoxWindow9 == null))
                {
                    this.mUICommandInputBoxWindow9 = new UICommandInputBoxWindow9(this);
                }
                return this.mUICommandInputBoxWindow9;
            }
        }
        #endregion
        
        #region Fields
        private UICommandInputBoxWindow mUICommandInputBoxWindow;
        
        private UICommandInputBoxWindow1 mUICommandInputBoxWindow1;
        
        private UICommandInputBoxWindow2 mUICommandInputBoxWindow2;
        
        private UICommandInputBoxWindow3 mUICommandInputBoxWindow3;
        
        private UICommandInputBoxWindow4 mUICommandInputBoxWindow4;
        
        private UIAllTaskBoxWindow mUIAllTaskBoxWindow;
        
        private UICommandInputBoxWindow5 mUICommandInputBoxWindow5;
        
        private UICommandInputBoxWindow6 mUICommandInputBoxWindow6;
        
        private UICommandInputBoxWindow7 mUICommandInputBoxWindow7;
        
        private UICommandInputBoxWindow8 mUICommandInputBoxWindow8;
        
        private UICommandInputBoxWindow9 mUICommandInputBoxWindow9;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow : WinWindow
    {
        
        public UICommandInputBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("MagicMemoGUI");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Today\'s Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("MagicMemoGUI");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow1 : WinWindow
    {
        
        public UICommandInputBoxWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("MagicMemoGUI");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Today\'s Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("MagicMemoGUI");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow2 : WinWindow
    {
        
        public UICommandInputBoxWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("MagicMemoGUI");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Today\'s Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("MagicMemoGUI");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow3 : WinWindow
    {
        
        public UICommandInputBoxWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("MagicMemoGUI");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Today\'s Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("MagicMemoGUI");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow4 : WinWindow
    {
        
        public UICommandInputBoxWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("MagicMemoGUI");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Today\'s Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("MagicMemoGUI");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIAllTaskBoxWindow : WinWindow
    {
        
        public UIAllTaskBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "allTaskBox";
            this.WindowTitles.Add("MagicMemoGUI");
            #endregion
        }
        
        #region Properties
        public WinEdit UIAllTaskBoxEdit
        {
            get
            {
                if ((this.mUIAllTaskBoxEdit == null))
                {
                    this.mUIAllTaskBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIAllTaskBoxEdit.WindowTitles.Add("MagicMemoGUI");
                    #endregion
                }
                return this.mUIAllTaskBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIAllTaskBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow5 : WinWindow
    {
        
        public UICommandInputBoxWindow5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("MagicMemoGUI");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Today\'s Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("MagicMemoGUI");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow6 : WinWindow
    {
        
        public UICommandInputBoxWindow6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("MagicMemoGUI");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Today\'s Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("MagicMemoGUI");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow7 : WinWindow
    {
        
        public UICommandInputBoxWindow7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("MagicMemoGUI");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Today\'s Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("MagicMemoGUI");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow8 : WinWindow
    {
        
        public UICommandInputBoxWindow8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("MagicMemoGUI");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Today\'s Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("MagicMemoGUI");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICommandInputBoxWindow9 : WinWindow
    {
        
        public UICommandInputBoxWindow9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commandInputBox";
            this.WindowTitles.Add("MagicMemoGUI");
            #endregion
        }
        
        #region Properties
        public WinEdit UICommandInputBoxEdit
        {
            get
            {
                if ((this.mUICommandInputBoxEdit == null))
                {
                    this.mUICommandInputBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICommandInputBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Today\'s Tasks";
                    this.mUICommandInputBoxEdit.WindowTitles.Add("MagicMemoGUI");
                    #endregion
                }
                return this.mUICommandInputBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICommandInputBoxEdit;
        #endregion
    }
}
